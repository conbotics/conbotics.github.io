{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MalerRoboter","text":""},{"location":"cb_docs/","title":"cb_docs","text":""},{"location":"cb_docs/#onboarding-for-new-employees","title":"Onboarding for new employees","text":"<p>Onboarding</p>"},{"location":"cb_docs/#software-architecture-structure","title":"Software Architecture Structure","text":"<p>Architecture PDF</p>"},{"location":"cb_docs/#introduction-to-github-project-managment-at-conbotics","title":"Introduction to GitHub Project Managment at Conbotics:","text":"<p>Project Management</p>"},{"location":"cb_docs/#robot-cleaning-instruction","title":"Robot cleaning instruction","text":"<p>Putzanleitung</p>"},{"location":"cb_docs/#basic-interaction-with-robot-in-the-command-line","title":"Basic interaction with robot in the command line","text":"<p>For interfacing with the running ROS server, we use catmux. Upon startup, there is a catmux session running launched by the startup node. When pressing \"initialize\" in the  GUI, the respective windows for core, arm, base, etc. are added to the running session and closed upon \"de-initialize\". To view and scroll through the running session, the bash alias <code>cattach</code> (for <code>catmux attach</code>) can be used. This opens a separate catmux session that is linked to the original one. The advantage of this is that all users can have their separate session running, meaning they can scroll and navigate through the windows independently. Exiting the session can be done with <code>ctrl + b</code> <code>d</code>.</p> <p>If you really want to attach to the original session for whatever reason, use <code>catmux attach</code> or <code>catmux attach -t catmux</code>. Be careful as the <code>ctrl + b</code> <code>d</code> command has been remapped to killing the entire session (so that the sessions opened by <code>cattach</code> don<code>t accumulate). To detach, do</code>ctrl + b<code>and type</code>:detach` followed by enter.</p> <p>To scroll and have the process continue at the same time, at least <code>tmux 3.2</code> is necessary (see here). The newest version can be installed using this script.</p>"},{"location":"cb_docs/#robot-folders-on-the-robots","title":"Robot Folders on the Robots","text":"<p>The operating system of the robots launches by default the roscore, startup node and the catmux session. This process are called from the default robot folders environment <code>robot_wss/develop</code>. To add a new environmnt use <code>fzirob add_environment my_env</code> and then source it with <code>ce my_env</code>. Then you can copy the source to your environment like so: <code>cp -r ~/robot_wss/develop/catkin_ws/src ~/robot_wss/my_env/catkin_ws/src</code>. After copying <code>src</code> you can build the code with the command <code>makeros</code>, which can be called from any location in the file system, if you have sourced the environment before. Finally, you can now kill the running startup node, source again (necessary again after build), start a new startup node and catmux session with running the command <code>robce my_env</code>. </p>"},{"location":"cb_docs/#using-the-simulation-on-the-robot","title":"Using the simulation on the robot:","text":"<p>Simulation docs</p>"},{"location":"cb_docs/#for-our-customers","title":"For our customers","text":"<p>Troubleshooting</p>"},{"location":"cb_docs/CHIC/","title":"CHIC","text":""},{"location":"cb_docs/CHIC/#food-places","title":"Food Places:","text":""},{"location":"cb_docs/CHIC/#what-we-always-eat","title":"What we always eat:","text":"<ul> <li>R\u00fcya Gem\u00fcse Kebap<ul> <li>best D\u00f6ner</li> </ul> </li> <li>\u201cMutti\u201d (Cafe Mediterrane):<ul> <li>Leibnizstra\u00dfe 110, 10625 Berlin</li> </ul> </li> <li>Dave B. Taste Five<ul> <li>Otto-Suhr-Allee 6-16, 10585 Berlin</li> <li>different options on different lines</li> <li>noodles, burger, and specials of the week</li> </ul> </li> </ul>"},{"location":"cb_docs/CHIC/#what-we-already-tried","title":"What we already tried:","text":"<ul> <li>In house Canteen<ul> <li>was expensive, and small portions when we tested it</li> </ul> </li> <li>Chen's Wok<ul> <li>Otto-Suhr-Allee 11-13, 10585 Berlin</li> <li>proper restaurant with chinese food</li> <li>tasty but expensive</li> <li>we always ate there</li> </ul> </li> <li>Rong's Noodlehouse<ul> <li>Leibnizstra\u00dfe 101, 10625 Berlin</li> <li>tasty but very slow and small</li> <li>ramen style soups</li> </ul> </li> <li>Cafeteria TU \"Skyline\u201d<ul> <li>university canteen</li> <li>kind of expensive burgers with pommes</li> <li>tastes between homemade and cheap</li> </ul> </li> </ul>"},{"location":"cb_docs/CHIC/#yet-to-test","title":"Yet to test:","text":"<pre><code>- Ristorante Verbano - Pizza\n- Currystation 36\n</code></pre>"},{"location":"cb_docs/test/","title":"MalerRoboter","text":""},{"location":"cb_docs/Debugger/Readme/","title":"Debugging with VSCode and ROS","text":"<p>It is possible to use the VSCode Debugger with ROS. For taht you have to make sure: * install the ROS Plugin (Author Microsoft) and make sure it is the version compatible with ROS1. It usually tells you that it is deprecated. * The debugger can be used for Python and C++, however, only <code>roslaunch</code> is working for both. <code>rosrun</code> is only working for Python! * Always rebuild all projects that should be able to work with the debugger from scratch! That means, do a <code>catckin clean</code> before that. Otherwise, even with a debug flag it won't be recompiled. Then run <code>catkin build -DCMAKE_BUILD_TYPE=Debug</code>. It will take more time then the release built (~30 min).</p>"},{"location":"cb_docs/Debugger/Readme/#run-in-vscode","title":"Run in VSCode","text":"<p>You have to add <code>roslaunch</code> in the <code>launch.json</code>. To do so, you have to add the following part under the configuration tag:</p> <pre><code>{\n            \"name\": \"ROS: Launch Test Servers\",\n            \"type\": \"ros\",\n            \"request\": \"launch\",\n            \"target\": \"/path/to/launch_file.launch\",\n            \"launch\": [\n                \"rviz\",\n                \"gz\",\n                \"gzclient\",\n                \"gzserver\"\n            ],\n            //\"preLaunchTask\": \"catkin_build_debug\", // &lt;&lt;&lt; This is the task that will run before debugging starts\n        },\n</code></pre> <ul> <li>replace with your system path to the launch file <code>/path/to/launch_file.launch</code></li> <li>You can also rename the configuration. This name will be shown later in the drop down menu of the debugger (see image below)</li> <li>You can also uncomment the preLaunchTask (however, it will take much more time here than in the console and it will rebuild the software each time you start the debugger. For setting the preLaunchTask see below)</li> </ul>"},{"location":"cb_docs/Debugger/Readme/#run-debugger","title":"Run debugger","text":"<ul> <li>Choose the debugger (arrow with little bug) on the left pane   </li> <li>Choose the name you have given in the top drop down menu and click the little green arrow</li> <li>In the top right corner all running all running nodes/programms are shown. there is also a small arrow indicating the drop down menu to choose between all running nodes and programs.  </li> <li>Pausing only pauses the current node!</li> <li>After that you can set brakepoints and use the debugger as usually</li> <li>More detailed Debugger Docu for VSCode: Debugger Documentation</li> </ul>"},{"location":"cb_docs/Debugger/Readme/#set-prelaunchtask","title":"Set preLaunchTask","text":"<ul> <li>To set a preLaunchTask you have to add/open the tasks.json</li> <li>Under tasks add the following configuration:</li> </ul> <pre><code>    {\n      \"label\": \"catkin_build_debug\",\n      \"type\": \"shell\",\n      \"command\": \"catkin\",\n      \"args\": [\n        \"build\",\n        \"--cmake-args\",\n        \"-DCMAKE_BUILD_TYPE=Debug\"\n      ],\n      \"options\": {\n        \"cwd\": \"${workspaceFolder}/..\" // Run from the root of the catkin workspace\n      },\n      \"problemMatcher\": [\n        \"$gcc\" // Or use \"$catkin-gcc\" if defined\n      ],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": false\n      }\n    }\n</code></pre>"},{"location":"cb_docs/IT_securitry/Encryption/","title":"Robot PC","text":""},{"location":"cb_docs/IT_securitry/Encryption/#jetson","title":"Jetson","text":"<p>The jetson can only be encrypted by the Nvidia provided flashing tools. Please download them eiterh from the release page (https://developer.nvidia.com/embedded/jetpack-sdk-515) or by the Nvidia SDK-Manager.</p> <ol> <li>Genrate key with name sym2_t234.key with the key f0e0d0c0b0a001020304050607080900</li> <li>Copy flash_procedure_jetson.bash to the Linux_for_Tegrea folder</li> <li>Jump Pin 3&amp;4 on Jetson Module to enable recovery mode and plug in usb-c to usb-A to your host machine</li> <li>Power the Jetson on and execute the bash script. The flash process should start and finish cleanly</li> <li>Power on Jetson again and follow the setup process</li> <li>Setup the Jetson as following:</li> <li>Copy all the files to teh home directory including the setup bash script</li> <li>Execute the bash install_jetson.bash script from cb_docker in the home folder of the encrypted jetson and replace the .bashrc with the backed up one</li> <li>SSH to the robot pc and execute <code>ssh-copy-id conbotics@10.11.12.40 -f</code> to copy the new ssh key to the jetson</li> <li>SSH to the Jetson and execute <code>makeros</code> and <code>`robce</code> everything should work now</li> </ol>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/","title":"IT Security notes","text":"<p>Our system:  - mobile robot (fleet) sold to customers  - internet connection to update + send data - just authorized devices should be allowed to connect to the robot  - Network architecture: ![[network_diagram.png]]</p> <p>Timeline: - First robots send to customers in June 2025 - By the end of the year send 5 robots to customers</p> <p>What we needed: - remote access  - hard drive encryption - 2FA + password management for robot access - hardware protection for USB - network protection - source code protection - tablet protection</p> <p>What we have done: - remote access: netbird as vpn service - password management system - mac address whitelist (router) - hard drive encryption (pc + started on jetson)</p> <p>What we still need / What we want: - hardware protection for USB (mac binding?) - jetson encryption - (source code protection / deployment) - (hard drive encryption) - general network security - tablet kiosk mode</p> <p>In depth description</p>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/#1-encryption","title":"1. Encryption","text":"<p>1.1 Main-PC     Encrypted main disk using LUKS1 encryption (AES-XTS)         LUKS2 incompatible with ubuntu 20.04 (more so the packages)         cryptsetup for management of encryption         clevis (clevis-tpm2) for auto unlock of disk         Key is stored in security module TPM of the cpu (is called PTT in Bios)         following command was used: <code>clevis luks bind -d /dev/sdX tpm2 '{}'</code>         default PCR 7 (didnt speify PCR ID's - special register inside TPM)             Partitioned the OS into 3 partitions                 boot - Grub - Main-OS</p> <p>1.2 Jetson     Uses <code>L4T-Launcher</code> (U-Boot - resides on the QSPI memory)     <code>ARM-64</code> architecture - i.e. many packages wont work regarding encryption     There are flash scripts that include auto encryption         Path: /Linux_for_tegra/tools/kernel_flash/.....     Have to be slightly modified to allow personal key         Personal key can be exchanged for auto unlock (auto key retrieval from main pc)             i.e. packages such as <code>dropbear-initramfs</code>             or running a server on the main PC such as <code>tang</code></p> <p>Rough sketch of command:</p> <pre><code>sudo ./tools/kernel_flash/l4t_initrd_flash.sh --external-device nvme0n1p1 \\\n  --use-keyfile \\\n  --encrypt \\\n  jetson-orin-nano-devkit mmcblk0p1\n</code></pre>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/#2-mac-filtering","title":"2. Mac Filtering","text":"<pre><code>Inside Router Admin Panel \n    LUCY: Mac Address Whitelist\n</code></pre>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/#3-remote-access","title":"3. Remote Access","text":"<pre><code>Netbird\nPC has Ip-Forwarding enabled\nVia Netbird client:\n    + NAT (masquerading - done via netbird)\n    + Network bridge (includes local Ip range)\nTraffic is routed through the \"gateway PC\"\n    allows remote devices to access the lan as if they were local\n</code></pre>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/#4-udev-rules","title":"4. Udev Rules","text":"<pre><code>script that extracts usb devices and whitelists them.\nso far only whitelisted - no actual ban on non whitelist usb\n    whitelisting may havent stuck in place\n</code></pre>"},{"location":"cb_docs/IT_securitry/IT-Security_notes/#what-needs-to-be-done","title":"What needs to be done:","text":"<ol> <li>Jetson encryption with encryption key being pulled from main PC via tang/dropbear-initramfs         cryptroot-unlock over ssh (with OpenSSH in initramfs) - implement startup service on main PC</li> <li>USB whitelisting (UDEV) - ban enforcement (Product/Vendor-ID)</li> <li>Firewall - security of Ports ... (maybe VLAN?)     Static Arp Tables against spoofing</li> <li>Lan connections disabling (Mac-Filtering)</li> <li>Screen connection disabling</li> <li>Main-PC encryption: change of PCR-ID for more security</li> <li>Tablet Kiosk mode</li> <li>Source Code protection</li> </ol>"},{"location":"cb_docs/IT_securitry/IT-Security_specs_list/","title":"IT Security specs list","text":"<p>PC:</p> <p>CPU: Intel i5 12500 \\ Motherboard: Q670EI-IM-A \\ RAM: CIR-S5SUSC4808G \\ SSD: CIS-2ST380MOF512GS \\ CAN Modul: EGPC B201 \\ System:  - Ubuntu 20.04.6 LTS Server Version  - ROS Noetic</p> <p>Jetson:</p> <p>Jetson Orin Nano Dev Kit \\ Jetpack 5.1.3, L4T 35.5.0, Ubuntu 20.04 </p> <p>Network switch:</p> <p>Netgear Series 3 GS308v3</p> <p>Router:</p> <p>GL-X300B</p> <p>Lidar:</p> <p>NANS3-CAAZ30ZA1</p> <p>Tablet:</p> <p>Samsung Tab A8 (SM-X205) \\ System: Android 14</p> <p>Safety PLC (SICK):</p> <p>Flexi Soft Sicherheitssteuerung EFI-pro-Modul FX3-GEPR00000 \\ Flexi Soft Sicherheitssteuerung Hauptmodul FX3-CPU000000 \\ Flexi Soft Sicherheitssteuerung I/O-Modul FX3-XTIO84002 \\ Flexi Soft Ethernet-Modul FX0-GENT00000 \\ Flexi Soft Sicherheitssteuerung Safe Motion Modul FX3-MOC00000 \\ Flexi Soft Steckverbinder FX3-MPL000001 </p> <p>Arm Motorcontroller:</p> <p>Nanotec 3x CL4-E-2-2; 2x CL4-E-1-2</p> <p>Base Motorcontroller:</p> <p>Orientalmotors BLV-R</p> <p>Camera</p> <p>Intel Realsense D456</p> <p>Arm Esp:</p> <p>diymore ESP32 WROOM</p> <p>Base Esp:</p> <p>AZDelivery ESP32 NodeMCU CP2102  \\ CAN Schnittstelle: 595-SN65HVD230DR</p> <p>Controller:</p> <p>PS5 Controller</p> <p>Remote Access:</p> <p>Netbird Client with 4G Module of Router, Standard SIM / E-SIM</p> <p>Sicherheitsrelevante\u00a0Aspekte\u00a0der\u00a0App: - L\u00e4uft\u00a0auf\u00a0Android\u00a0Tablets - Stack:     - Capacitor\u00a0JS\u00a0(native\u00a0App\u00a0mit\u00a0weblayer)     - React\u00a0+\u00a0TS\u00a0+\u00a0Vite     - relevante\u00a0dependencies:         - roslibjs\u00a0f\u00fcr\u00a0(unverschl\u00fcsselte)\u00a0Kommunikation\u00a0mit\u00a0ROS\u00a0bridge         - \"@capacitor/filesystem\"\u00a0f\u00fcr\u00a0Zugriff\u00a0(read/write)\u00a0auf\u00a0Dateien\u00a0(z.B.\u00a0Bilder\u00a0und\u00a0Raumplandateien) - Live\u00a0Updates\u00a0f\u00fcr\u00a0Tablets\u00a0per\u00a0Plugin\u00a0\"@capawesome/capacitor-live-update\"     - Erlauben\u00a0Updates\u00a0innerhalb\u00a0der\u00a0App\u00a0ohne\u00a0App-Store     - Sources\u00a0f\u00fcr\u00a0Weblayer\u00a0(html,\u00a0css,\u00a0js) werden\u00a0als\u00a0Bundle\u00a0per\u00a0Cloud\u00a0zur\u00a0Verf\u00fcgung\u00a0gestellt     - Capawesome\u00a0Cloud\u00a0registriert\u00a0Tablets,\u00a0die\u00a0die\u00a0App\u00a0nutzen\u00a0und\u00a0tracked\u00a0welches\u00a0Ger\u00e4t\u00a0auf\u00a0welcher\u00a0Version\u00a0l\u00e4uft \u00a0   -\u00a0Updates\u00a0m\u00fcssen\u00a0durch\u00a0Nutzer\u00a0aktiv\u00a0ausgew\u00e4hlt\u00a0werden     - Bundles\u00a0werden\u00a0mit\u00a0private\u00a0key\u00a0signiert,\u00a0sodass\u00a0App\u00a0keine\u00a0\"fremden\"\u00a0Updates\u00a0akzeptiert     - Self-hosting\u00a0des\u00a0Bundle-Servers\u00a0ist\u00a0eine\u00a0M\u00f6glichkeit     - Tablet\u00a0muss\u00a0f\u00fcr\u00a0Updates\u00a0mit\u00a0Internet\u00a0verbunden\u00a0sein,\u00a0sonst\u00a0nur\u00a0mit\u00a0dem\u00a0Roboter</p>"},{"location":"cb_docs/IT_securitry/Secure_boot/","title":"Secure boot","text":"<p>Documentation wip...</p>"},{"location":"cb_docs/IT_securitry/Secure_boot/#signing-cutom-kernel-for-secure-boot","title":"Signing cutom Kernel for secure boot","text":"<p>https://gloveboxes.github.io/Ubuntu-for-Azure-Developers/docs/signing-kernel-for-secure-boot.html</p>"},{"location":"cb_docs/IT_securitry/enable_usbguard/","title":"Enable usbguard","text":""},{"location":"cb_docs/IT_securitry/enable_usbguard/#usage","title":"Usage","text":"<p>For robot pc:</p> <pre><code>sudo bash enable_usbguard.bash x86\n</code></pre> <p>For jetson:</p> <pre><code>sudo bash enable_usbguard.bash jetson\n</code></pre> <p>If there are any problems with the usb connections after enabling usbguard uninstall it with</p> <pre><code>sudo apt remove usbguard\n</code></pre>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/","title":"Network interface","text":"<ul> <li>daisy chain</li> <li>each device ID</li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#setup","title":"setup","text":"<p>install driver</p> <p>sudo ip link set can0 type can bitrate 250000 sudo ip link set can1 type can bitrate 1000000</p> <p>bringup sudo ip link set up can0</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#communication","title":"communication","text":"<p>candump can1 - outputs/dumps dataflow - can be filtered:     - e.g. candump can1,123:FFF         - canid 123         - fff select all frames     - ... more options</p> <p>cansend can1 xxx:</p> <p>action#adress 2byte+subindex 1byte+ 5byte data -&gt; 3#16 -&gt; flip pairs of hex numbers (little vs big endian)</p> <p>special cansend commands: - reset communication:     - 000#8200 + NodeID (000#8201 for m1, 00 for all) - reset controller     - 000#8100 + NodeID (see above)</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#spo-pdo","title":"SPO &amp; PDO","text":"<ul> <li>spo blocking, call manually</li> <li>pdo in process (with fixed mapping)</li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#motorcontroller","title":"Motorcontroller","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#drive-file","title":"Drive file","text":"<p>cb_config/arm_configs/arm_x/driver.yaml - sets up motor controller - mapping of pdos</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#ros-canopen-services","title":"ros canopen services","text":"<ul> <li>/sprayarm/driver/get_object<ul> <li>get values from motor controller</li> <li>use joint name (e.g. m1_joint) to address motor</li> <li>set  hex (or decimal?, e.g. 0x6064) for object selection</li> <li>returns written value</li> </ul> </li> <li>/sprayarm/driver/set_object<ul> <li>write same way as read</li> </ul> </li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#handbook","title":"handbook","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen%20basics/#example-brakes","title":"example brakes","text":"<ol> <li>automatic brake control: 3202</li> <li>set brake manually: 60fe sub1</li> </ol>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen_motor_setup/","title":"CANopen motor setup","text":"<p>TODO: cleanup notes from workshop</p> <ol> <li>Hardware setup - connect all the wires</li> <li>connect with plug and drive</li> <li>firmware update?</li> <li>Node-ID und Baudrate setup (Object 2009)<ul> <li>for saving: set Object 0x1010:0A=0x65766173 </li> </ul> </li> <li>values from datasheet in software (Drive/Current):<ul> <li>Motor select (M1 is Bldc)</li> <li>pole pair</li> <li>encoder resolution ppr (=cpr x 4) (negative for china motors)</li> <li>closed loop</li> <li>Current:<ul> <li>max/nominal current from datasheet (3 values)</li> <li>stepper: max= nominal</li> </ul> </li> </ul> </li> <li>3202=b10101 ones for: auto align, auto break control, closed loop<ul> <li>auto align only for motors without index impulse</li> </ul> </li> <li>brake to digital output 2 (m1-m3)<ul> <li>3250:8(routing enabled)=1</li> <li>3252:3=0x1080</li> </ul> </li> <li>auto setup for m1,m4,m5 (only if index impulse is available)</li> <li>3203:3=0x7 (sets all 3 control loops use encoder)</li> </ol>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen_motor_setup/#setup-spray-valve-for-cl4-motorcontroller-walt-r3","title":"Setup Spray Valve for CL4 Motorcontroller (WalT-R3):","text":"<ul> <li>digital out 1 brake</li> <li>digital out 2 Spray Valve<ul> <li>Cl4: invert the behavior: 3250:02 -&gt; bit 17</li> <li>output is then set with 60fe:01 -&gt; bit 17</li> </ul> </li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/CANopen_motor_setup/#notes-from-workshop-at-21723","title":"Notes from Workshop at 21.7.23:","text":"<p>spo blocking for setup pdo process check statemachine for availablility</p> <p>firmware version f\u00fcr Handbuch steht vorne -&gt; firmware aktuallisieren </p> <p>kapitel 4.2 setup f\u00fcr motorkontroller</p> <p>gui object directory macht langsam \u00fcber konsole node id liest                 nodeid=... schreibt</p> <p>drive: produkt-&gt;steuerung-&gt;arm-&gt;motoren</p> <p>stepper 2-5: peak und nominal strom gleich peak strom auf 12 Ampere nicht mehr</p> <p>encoder resolution cpr, ppr -&gt; ppr eintragen (quatratur)</p> <p>f\u00fcr schwarze motoren ohne indeximpuls     - in 3203 muss 7 eingetragen werden     - encoder resolution negativ</p> <p>wichtig beim setup: Automatische Bremssteuerung.sonst versuch autosetup dass mit bremse - bremssteuerungsbit in motor drive - kapitel s.102 digitale ausg\u00e4nge     - routing 2.bsp f\u00fcr bremsen</p> <p>\u00fcbersetzung f\u00fcr kleine motoren checken (i auf motor x 4 f\u00fcr Kegelrad)</p> <p>eds files neue laden von firmware und dann laden in motor.yaml</p> <p>automatische Bremssteuerung: Motor Drive Submode Select: 3202h bit 2</p> <p>auto alignment bit 4</p> <p>Bremse korrekt \u00e4ndern:      1. automatische bremssteuerung aus: 3202     2. bremse manuel setzen mit 60fe sub1: bit 18 ohne routing bit 0 mit routing setzen (1: zu, 0: offen)</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/Motorcontroller%26CANopen/","title":"Motorcontroller&CANopen","text":"<p>This section describes our knowledgebase of our Motorcontroller and Canopen including how-to's and the configuration of our motors. The current motorcontroller handbook is provided here CL4E_CANopen_USB_ModbusRTU_Technisches-Handbuch_V1.5.0.pdf Other versions can be found on the Nanotec Website Check on the front page if you are using the correct handbook for your firmware version.</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/","title":"Real time computing","text":"<p>On the robot real-time computing is necessary, to make sure time critical actions are done in time. The main goal is to fight bumps happening on the robot. Make your Linux real time capable: 1. apply Kernel realtime patch:      1. Kernel can be installed with dpkg     2. make sure the rt Kernel is running with uname -r     3. maybe switch vmlinuz, initrd.img links using ln in /boot to point to rt kernel. (not used by grub?!) 2. tune the system     1. isolate cpu for rt applications, don't run anything on it:         1. possibility 1: /etc/systemd/system.conf:             1. CPUAffinity =0 1 3                    -&gt; normal tasks will only be pushed to cpu core 0,1,3. Can also use -                    -&gt; some task might still be on the kernel         2. or use boot parameters     2. possibility 2: Boot parameters:              1. add isolcpus=x to GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub             2. isolcpus not working? -&gt; use cset     3. shield with cset</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#manual-realtime-process","title":"manual realtime process:","text":"<ol> <li>activate cset shield: sudo cset shield -c 8 </li> <li>start roslauch with process, as u will have acces problem if you start directly with cset</li> <li>move process to shield using pid: sudo cset shield -s -p {pid}</li> <li>set sheduler ro real time (fifo) + prio to 98 (99?): sudo chrt -f -p98 {pid}</li> </ol>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#launching-realtime","title":"launching realtime:","text":"<ul> <li>chrt requires sudo<ul> <li>sudo in roslaunch is BAD:<ul> <li>require password -&gt; add to /etc/sudoers</li> <li>resets environment:<ul> <li>-E flag might help BUT doesnt. No shared libraries found...</li> </ul> </li> </ul> </li> </ul> </li> <li>chrt+taskset are to quests</li> <li>-&gt; write script?<ol> <li>script launches roslauch file</li> <li>get pid of realtime with 'pidof'</li> <li>chrt -f 98 pid</li> <li>taskset pid  -**&gt;this is implemented and needs testing</li> </ol> </li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#current-setup","title":"Current setup","text":"<p>We separated CPU 9 (id 8) for realtime purposes of the arm - /etc/systemd/system.conf:     - Isolate CPU 9 (id 8)     - <code>CPUAffinity=0 1 2 3 4 5 6 7 9 10 11</code> - /etc/default/grub:     - prevent syscalls to cpu 9, isolate with:      - <code>GRUB_CMDLINE_LINUX_DEFAULT=\"isolcpus=8 nohz_full=8\"</code>     - update grub afrerwards: <code>sudo update-grub</code> - add realtime sudoers file from bringup/config sudoers.d (README) for chrt command - launch cb_motors in cb_sprayarm/cb_hardwareinterface via modifying script from config</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#testing","title":"Testing","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#stress-ng-tests","title":"stress-ng tests","text":"<p>we tested alot with stress-ng to reproduce the problem Following results with different stress-ng settings: - atomic: 1 hit - bad-altstack: multiple hits - bigheap: ausf\u00fchrung unterbrochen (nach line) - brk: 1 big hit and stopped afterwards - clone: scary, missing messages galore. Stopped and then went very fast --- tested every option alphabeticly till copy file</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/Real-time%20computing/#cyclictest","title":"cyclictest","text":"<p>for testing realtime capabilities: ./cyclictest -S -m -p99 -l 300000 -q</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/","title":"How to reset the axes 1 to 3 of the painting arm","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#can-message-structure","title":"CAN message structure","text":"<p>A general explanation of the CAN message structure:</p> <p><code>[60][AXIS_ID]#[MSG_TYPE] [INDEX(REVERSED)] [SUBINDEX] [MESSAGE(REVERSED)]</code></p> <ul> <li>60: dunno</li> <li>AXIS_ID: 1, 2 or 3 (depending on which axis to send to)</li> <li>MSG_TYPE:</li> <li>40 = request</li> <li>43 = response</li> <li> <p>23 = command</p> </li> <li> <p>INDEX(REVERSED in pairs):</p> </li> <li><code>0232</code> for index 3202 -&gt; automatic brakes</li> <li><code>fe60</code> for index 60fe -&gt; manual brakes</li> <li>SUBINDEX:</li> <li><code>00</code> for index 3202 (automatic brakes)</li> <li><code>01</code> for index 60fe (manual brakes)</li> <li>MESSAGE (REVERSED in pairs): to send 00 01 00 00 you actually have to send 01 00 00 00</li> </ul> <p>Example: <code>602#23 0232 00 00 00 00 00</code></p> <p>\u2192 a message to axis <code>2</code> sending a command (<code>23</code>) to index <code>3202</code> and subindex <code>00</code> with the message <code>00 00 00 00</code></p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#candump-response-structure","title":"CANdump response structure","text":"<p><code>can1 582 [8] 43 02 32 00 05 00 00 00</code></p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#resetting-procedure","title":"Resetting procedure","text":"<p>The following steps are done for axis <code>2</code> as an example, but are transferrable to the other axes.</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-1-disengaging-the-automatic-brake","title":"Step 1: Disengaging the automatic brake","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-1a-reading-out-the-current-value-for-the-automatic-brake","title":"Step 1a: Reading out the current value for the automatic brake","text":"<p>Request to motor controller: <code>cansend can1 602#4002320000000000</code></p> <p>\u2192 can message: <code>60 2 # 40 0232 00 00000000</code> - axis <code>2</code> - request <code>40</code> - index <code>3202</code> (reversed) - subindex <code>00</code> - empty message <code>00 00 00 00</code></p> <p>Response from motor controller: <code>can  582 [8] 43 02 32 00 05 00 00 00</code> - response message type (<code>58</code>) - axis <code>2</code> - message length <code>8</code> - response message type (??) (<code>43</code>) - index <code>3202</code> (reversed) - subindex <code>00</code> - message <code>05 00 00 00</code> \u2192 <code>5</code><sub>hex</sub></p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-1b-converting-hex-value-to-binary-inverting-bit-2-converting-back-and-sending-to-motor","title":"Step 1b: Converting HEX value to binary, inverting bit 2, converting back and sending to motor","text":"<p>5<sub>hex</sub> = 0101<sub>bin</sub></p> <ul> <li>inverting bit 2: 0<code>0</code>01</li> <li>converting back to hex: 0001<sub>bin</sub> = 1<sub>hex</sub> \u2192 can message: <code>01 00 00 00</code></li> <li>send back: <code>cansend can1 602#2302320001000000</code></li> </ul>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-2-dis-and-re-engaging-the-manual-brake","title":"Step 2: Dis- and re-engaging the manual brake","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-2a-disengaging-the-manual-brake","title":"Step 2a: Disengaging the manual brake","text":"<p>Command to motor controller: <code>cansend can1 602#23fe600100000000</code></p> <p>\u2192 can message: <code>60 2 # 23 fe60 01  00 00 00 00</code> - axis <code>2</code> - command message type (<code>23</code>) - index <code>60fe</code> (reversed) - subindex <code>01</code> - message <code>00 00 00 00</code></p> <p>Now you can make your manual adjustments to the axis.</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-2b-re-engaging-the-manual-brake","title":"Step 2b: Re-engaging the manual brake","text":"<p>Command to motor controller: <code>cansend can1 602#23fe600101000000</code></p> <p>\u2192 can message: <code>60 2 # 23 fe60 01  01 00 00 00</code></p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-3-re-engaging-the-automatic-brake","title":"Step 3: Re-engaging the automatic brake","text":""},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-3a-sending-the-command","title":"Step 3a: Sending the command","text":"<p>Command to motor controller: <code>cansend can1 602#2302320005000000</code></p> <p>\u2192 can message: <code>60 2 # 23 0232 00  05 00 00 00</code> - axis <code>2</code> - command message type (<code>23</code>) - index <code>3202</code> (reversed) - subindex <code>00</code> - message <code>05 00 00 00</code> \u2192 as read out in step 1a</p>"},{"location":"cb_docs/Motorcontroller%26Canopen/reset_axes_tutorial/#step-3b-confirming-that-re-engaging-has-worked","title":"Step 3b: Confirming that re-engaging has worked","text":"<p>Request to motor controller: <code>cansend can1 602#4002320000000000</code></p> <p>\u2192 can message: <code>60 2 # 40 0232 00 00000000</code> - axis <code>2</code> - request <code>40</code> - index <code>3202</code> (reversed) - subindex <code>00</code> - empty message <code>00 00 00 00</code></p> <p>Response: <code>can  582 [8] 43 02 32 00 05 00 00 00</code> - response message type (<code>58</code>) - axis <code>2</code> - message length <code>8</code> - response message type (??) (<code>43</code>) - index <code>3202</code> (reversed) - subindex <code>00</code> - message <code>05 00 00 00</code></p>"},{"location":"cb_docs/Network/Robot%20Network%20Configuration/","title":"Robot Network Configuration","text":"<p>Configurations from inside</p> IP Router 10.11.12.1 PC 10.11.12.10 Lidar 1 10.11.12.20 Lidar 2 10.11.12.30 Jetson 10.11.12.40 <p>Configurations from outside</p> SSID IP Rob2 (gen2) Rob2 Rob3 (gen3) Rob3 Rob4 (gen4) Rob4 Rob5 (gen4) Rob5 Rob6 (gen5) Rob6"},{"location":"cb_docs/Network/netbird/","title":"Netbird","text":""},{"location":"cb_docs/Network/netbird/#doc-regarding-netbird-setup","title":"Doc regarding netbird setup","text":"<pre><code>curl -fsSL https://pkgs.netbird.io/install.sh | sh\n\nnetbird up\n\nnetbird status\n</code></pre> <ul> <li> <p>Get admin access - for that ask either me (Konstantin) or Jos\u00e9</p> </li> <li> <p>Login via Github - ask for username and password </p> </li> </ul> <p>To turn the network off just execute the following command</p> <pre><code>netbird down\n</code></pre>"},{"location":"cb_docs/Network/netbird/#reconfigure-netbird-client-on-new-robot","title":"Reconfigure netbird client on new robot","text":"<pre><code>sudo netbird down\nsudo rm -rf /etc/netbird/\nsudo rm -rf /var/lib/netbird\nsudo netbird up --setup-key &lt;NETBIRD_KEY&gt;\n</code></pre> <p>Change the name of the robot in the netbird web interface from your pc afterwards.</p>"},{"location":"cb_docs/Network/wifi_router_settings/","title":"Wifi router subnet considerations","text":"<p>Subnets such as <code>192.168.0.x</code> are quite common and vulnerable (for more information see https://routersecurity.org/ipaddresses.php). Within the Conbotics networks, this subnet is also already occupied by the local router.</p> <p>For compatibility and easy handling, the router uses the uncommon subnet <code>10.11.12.x</code>, which is also reserved for private use. The usable subnet range is <code>10.11.12.10</code> to <code>10.11.12.249</code>, in order to leave IPs at start and end that could be used by special devices.</p>"},{"location":"cb_docs/Network/wifi_router_settings/#reserved-ips","title":"Reserved IPs:","text":"<ul> <li><code>10.11.12.1</code>: router</li> <li><code>10.11.12.10</code>: robot server ('conbotics')</li> </ul>"},{"location":"cb_docs/cb_base_docs/base/","title":"cb_base documentation","text":""},{"location":"cb_docs/cb_base_docs/base/#software","title":"Software","text":"<p>To connect to the robot, and either control the base or run state machines, follow these guidelines:</p>"},{"location":"cb_docs/cb_base_docs/base/#1-power-up-the-robot","title":"1. Power up the robot","text":"<ol> <li>Follow these guidelines to power up and connect to the robot</li> </ol> <p>By powering up the robot, a catmux session is automatically launched, that sets the correct ROS_IP and ROS_MASTER_URI variables, and opens two tabs/sessions, through the <code>ce_and_startup_node.bash</code>: - <code>startup_node</code>: Launches the <code>startup_node.launch</code> which includes all the necessary but also bare minimum processes needed to run, to power up and have feedback of the state of the robot. It also runs a check task that these processes have started. In particular, it:     - sets the required parameters,     - launches the necessary ROS nodes for the GUI,     - launches the driver of the base,     - launches the velocity_smoother: takes as input the cmd_vel and sends to the base a more smooth velocity pattern,     - launches the bot_release,     - launches the PLC controller for the base, and     - launches the servo and led controllers. - <code>cb_logger</code>: Contains relevant logs of the robot.</p>"},{"location":"cb_docs/cb_base_docs/base/#2-connect-to-the-robot-and-its-running-sessions","title":"2. Connect to the robot and its running sessions","text":"<p>To attach to the sessions currently running on the robot, run:</p> <pre><code>cattach\n</code></pre> <p>Notes: - Even if the robot is not yet initialized, but just powered up, you can still manually drive it (the base driver, and hence the <code>cmd_vel</code> is already working). - LiDARS are not working at this state.</p>"},{"location":"cb_docs/cb_base_docs/base/#3-initialize-the-robot","title":"3. Initialize the robot","text":"<p>On the GUI, press the <code>Initialize</code> button. This opens up 4 more sessions, through the <code>catmux_session_manager.bash</code>: - base: Corresponds to <code>start_base_real.launch</code> - core: Corresponds to <code>start_core_catmux.launch</code> - arm: Corresponds to <code>start_arm_catmux.launch</code> - vision: Corresponds to <code>start_vision_pc.launch</code></p> <p>Only run <code>catmux_session_manager.bash</code> if you're not using the GUI.</p>"},{"location":"cb_docs/cb_base_docs/base/#base-launch-file","title":"Base launch file","text":"<p>It launches: - the description of the robot - the controllers - the perception launch file: for the sensors to build the 2d map     - launches the lidars (each lidar has its own node. scan1 for the back, scan2 for the front lidar)     - merges the readings of the two lidar on one (based on <code>laser_filtering.yaml</code> parameters)     - launches IMU     - launches UKF (fuses IMU, wheel and ICP odometry)     - launches corner and line extraction processes     - launches gmapping (will turn to rtabmap)     - launches proximity launcher that checks for adjacent to the robot objects. In rviz this is depicted as green lines turned red if anything goes beyond that limit, or if the bucket is located in fron of the bucket. - move base flex for navigation. <code>move_base.yaml</code> includes all the relevant parameters for planners and controllers. It also launches the following servers:     - <code>corner_selection_server</code>: It checks for corners based on which side of the robot, the wall is (right/left)     - <code>corner_alignment_server</code>: It receives the id of the corner to align and calculates the end position to send to move base.     - <code>wall_change_server</code>: to change wall     - <code>row_change_server</code>: to change the painting row     - <code>rotation_server</code>: to change rotation     - <code>weighted_pid</code>: PID for wall alignment     - <code>long_base_motion_server</code>: For the robot to move as straight as possible when aligning to the wall     - <code>straight_line</code>: to move straight only - sets bot_release to true to release the brakes (legacy code. Now, everytime we send a velocity command, the brakes are released)</p> <ul> <li>Rviz<ul> <li>Blue corners define outer corners. Green ones define inside corners.</li> <li>Around the robot, green rectangle defines the robot footprint. Red is the emergency area. Yellow the warning area (where the robot operates with half the speed) </li> <li>Blue rectangle close to the robot, defines the area where the bucket should NOT be located to not interfere with lidar measurements.</li> </ul> </li> </ul>"},{"location":"cb_docs/cb_base_docs/base/#core-launch-file","title":"Core launch file","text":"<p>Core consists of the state machines that execute the robot's movements for painting. It is a high-level decision-making package for communication between the robot back-end and the GUI.</p> <p>It launches the following state machine servers: - <code>start_sm_as</code>: A coordinator state machine that receives a StartSM action goal, it builds the environment with the <code>object_server</code>, starts a state machine and monitors its execution. - <code>move_arm_as</code>: It receives MoveArm action goals, plans a movement and optionally executes. - <code>flexbe_as</code>: a state machine for flexbe - <code>behavior_onboard.launch</code> - <code>object_server</code> which publishes information about obstacles, corners, ceiling lines and the required parameters - <code>builder</code> node that uses the info from the <code>object_server</code> to build the environment and publishes the process list (sequence of actions) for use by other nodes. It also visualizes this information, and runs a logger.</p> <p>By default, when powering up the robot (<code>startup_node.launch</code>), the <code>Full WaltR Control</code> state machine is loaded. This, is the main state machine which: - gives <code>corners</code>, <code>obstacles</code> and <code>ceiling height</code> information to the <code>cb_object_server</code>  - saves the room structure as <code>room_data</code>. - <code>room_data</code> is then fed to <code>cb_builder</code> which starts the <code>process</code> by creating  - a <code>process list</code>: a list of tasks/actions to be done. These actions are basically state machines.</p> <p>As an example, it could give the tasks of moving the base few cm, move the arm from position 1 to 3, do the paint motion etc. </p> <p>The process list is then fed to the <code>control</code> state which commands the base, the arm, etc, accordingly.</p> <p><code>roslaunch flexbe_app flexbe_full.launch</code> launches the GUI app locally, where you can select different state machines from.</p>"},{"location":"cb_docs/cb_base_docs/base/#vision-and-arm-launch-files","title":"Vision and arm launch files","text":"<p>For the vision and arm launch files, check the following documentation: - Vision - Arm (TODO)</p>"},{"location":"cb_docs/cb_base_docs/base/#hardware","title":"Hardware","text":"<p>The robot communicates with the PC using the CAN protocol. The two buses with which it communicates, are: - CAN0: for the base - CAN1: for the arm</p> <p>Thus, for low-level troubleshooting, you may use <code>can-utils</code>, eg: - candump can0 - cansend can0 123#DEADBEEF - ...</p>"},{"location":"cb_docs/cb_core/state_machines_docs/","title":"cb_core","text":"<p>The entire logic of Conbotics robots are based on the FlexBE state machines. There are three important repositories regarding FlexBE: - FlexBE Behavior Engine:     FlexBE is a high-level behavior engine coordinating the capabilities of a robot in order to solve complex tasks. The most important packages of it are:     - flexbe_states contains a set of generic basic states which you can use in your own behaviors.      - flexbe_input provides an integrated way for data exchange from the operator to the robot</p> <ul> <li> <p>FlexBE App:     It provides a powerful behavior editor as well as runtime monitoring functionality. This is what we use to design our behavior trees.</p> </li> <li> <p>cb_flexbe repository:     Contains our custom states and behaviors:</p> <ul> <li>cb_flexbe_behaviors: It contains a <code>manifest</code> folder where the behaviors are stored. A behavior manifest is an abstract interface declaration each behavior defines, stored as an XML file, needed for FlexBE. It also contains a <code>config</code> folder needed for the behaviors.</li> <li>cb_flexbe_states: Contains the custom states needed for our purposes.</li> </ul> </li> </ul>"},{"location":"cb_docs/cb_core/state_machines_docs/#behaviors-state-machines","title":"Behaviors (State Machines)","text":"<p>The behaviors of the current state of the robot are the following: - Full WaltR Control: This is the main state machine to run programs on the Conbotics MalerRoboter Walt-R - Ceiling Painting: Paint the ceiling - Plan and execute ceiling spray: Get Plan for Arm and Execute Ceiling Spray motion with Base and Arm - Sprayarm Plan And Execute Forward Kinematic: Get Plan from Planning Manager then Execute the trajectory afterwards - Sprayarm Plan And Execute Movement: Get Plan from Planning Manager and Execute Movement it right after - Sprayarm Plan And Execute Spray: Get Plan from Planning Manager and Execute Spray Line it right after - Sprayarm Plan And Execute Switch: Get Plan from Planning Manager and Execute Side Switch it right after - Short Wall Alignment: Measures the wall length, and if it's short, it makes the corresponding movement</p>"},{"location":"cb_docs/cb_core/state_machines_docs/#states-capabilities","title":"States (capabilities)","text":"<p>The states (capabilities) of the current state of the robot are the following: - BaseMotionState - CameraAlignmentState - CBState - CeilingCheckState - CeilingControlState - CeilingSprayState - CheckState - ConfirmState - ControlState - CornerAlignmentState - CornerSelectionState - DebugState - DemoHomeState - ErrorHandlingState - FakeState - InitState - MeasureWallLengthState - MoveToPositionState - NextState - SprayarmExecuteMovementState - SprayarmExecuteSprayLineState - SprayarmPlanCeilingMovementState - SprayarmPlanForwardKinematicState - SprayarmPlanKinematicState - SprayarmPlanMovementState - SprayarmPlanSprayLineState - StartDemoState - SwitchState - UpdateState - WallChangeState</p>"},{"location":"cb_docs/cb_core/state_machines_docs/#create-a-new-state","title":"Create a new state","text":"<p>A state is nothing else than a Python class that inherits from a common base class, in our case <code>CBState</code>. Each state declares a set of outcomes which represent possible results of execution. Data can be shared and modified during runtime between states as <code>userdata</code>. Each state declares which keys it requires (input) and provides (output). Define one single state per file. To create a state: 1. Documentation: First specify the interface of the state - what does it do? eg:</p> <pre><code>class CheckConditionState(EventState):\n    '''\n    Checks if the given condition is true and returns the corresponding outcome.\n    This state can be used if the further control flow of the behavior depends on a simple condition.\n\n    -- predicate    function    The condition whose truth value will be evaluated.\n                                Has to expect one parameter which will be set to input_value and return a boolean.\n\n    &gt;# input_value  object      Input to the predicate function.\n\n    &lt;= true                     Returned if the condition evaluates to True\n    &lt;= false                    Returned if the condition evaluates to False\n    '''\n</code></pre> <p>Check here for more.</p> <ol> <li>Functions. There are two main functions that need to be implemented in every state:</li> <li>Constructor:</li> </ol> <pre><code>def __init__(self, target_time):\n        super(ExampleState, self).__init__(outcomes = ['continue', 'failed'])\n\n        self._target_time = rospy.Duration(target_time)\n        self._start_time = None\n</code></pre> <p>Here, variables and parameters are declared and proxies are initialized. Proxies are the FlexBE way to create publishers, subscribers, services or action clients, instead of creating any of these in every state. This allows for a faster startup It takes three arguments outcomes (required) input_keys (optional) output_keys (optional) - Execution: </p> <pre><code>def execute(self, userdata):\n        if rospy.Time.now() - self._start_time &lt; self._target_time:\n                return 'continue'\n</code></pre> <p>The execution loop is being called periodically (default: 10Hz). Outcomes are returned as one of the strings defined as outcome in the constructor.</p> <p>On top of these functions, there are further functions that are provided as callbacks to certain events. These can be found here. Most useful is the on_enter event, which is called once when a state becomes active. Typically, it is used to set variables to their initial values or send action goals, eg:</p> <ul> <li>Events:</li> </ul> <pre><code>def on_enter(self, userdata):\n        time_to_wait = rospy.Time.now() - self._start_time - self._target_time\n        if time_to_wait &gt; 0:\n                Logger.loginfo('Need to wait for %.1f seconds.' % time_to_wait)\n</code></pre>"},{"location":"cb_docs/cb_core/state_machines_docs/#create-a-new-behavior","title":"Create a new behavior:","text":"<ol> <li>Make sure that flexbe_behavior_engine and flexbe_app are installed  </li> <li>Launch the flexbe GUI</li> </ol> <pre><code>roslaunch flexbe_app flexbe_full.launch\n</code></pre> <ol> <li>Make sure the flexbe app is running correctly. Load a behavior. If it results in an error, try going to <code>Configuration &gt; Select Python as State parser &gt; Force Discover</code> and load a behavior again.</li> <li>Give the new behavior a name, describe it, and enter your name as an author. </li> <li>In the <code>Private Configuration</code> section add any constant value and in the <code>Behavior Parameters</code>, add any variables (and edit their properties) that may be needed by the behavior.</li> <li>In the <code>Statemachine Editor</code> add the required by the behavior states, by clicking <code>Add State</code>. Take into account that FlexBE already has some default states, such as <code>CheckConditionState</code>, <code>SubscriberState</code>, <code>WaitState</code>, <code>LogState</code> etc. The properties of the newly added state will pop up. Set the Autonomy Level of the state.</li> <li>Connect the states by using the black bullets.</li> <li>Save the behavior. This will generate all files required for executing the new behavior. </li> </ol>"},{"location":"cb_docs/cb_encryption/","title":"Guide for disk Backup/Encryption","text":"<p>Download all 3 partition images      Link: Enc Backups</p> <p>Pull the 2 backup files (1 for LUKS headers and 1 for the partition table)     - ABSOLUTE path is needed !!</p> <p>execute \"sudo chmod +x ....\" for both scripts</p>"},{"location":"cb_docs/cb_encryption/#flashing-the-disk-on-another-ubuntu-host-machine","title":"Flashing the disk on another Ubuntu host machine:","text":"<p>connect disk to a ubuntu host machine - make sure the disk is shown as sdb the 3 backup images aswell as the luks header and partition table should all be in one folder for simplicity reasons</p>"},{"location":"cb_docs/cb_encryption/#execute-the-applying_backupsh-bash-script-to-flash-the-disk","title":"execute the <code>applying_backup.sh</code> bash script to flash the disk","text":"<pre><code>- the script will unmount every partition of the disk\n- set up a partition table\n- set up the encryption\n- flash the backups to their respective partition\n- copies setup script onto drive for later setup on target pc\n</code></pre>"},{"location":"cb_docs/cb_encryption/#setting-up-finalizing-the-disk-on-the-target-device","title":"Setting up (finalizing) the disk on the target device:","text":"<p>Boot the PC - spam either ESC - F12 - Del to get into the Bios</p> <p>Activate TPM (PTT) Enter Bios of host PC  \u2192 PCH-FW Configuration     select PTT \u2192 Trustet Computing     Enable it \u2192 CPU Configuration \u2192 Intel Trusted Execution Technology     Enable it</p> <p>Activate Secure Boot     \u2192 Navigate to Security Panel \u2192 Secure boot     \u2192 switch to standard mode \u2192 then enable secure boot \u2192 Save &amp; Exit</p> <p>On startup \u2192 select generic kernel image</p> <p>enter Old Passphrase to unlock disk</p>"},{"location":"cb_docs/cb_encryption/#now-execute-the-scipt-enc_disk_setupsh","title":"now execute the scipt <code>enc_disk_setup.sh</code>","text":"<pre><code>- the script will delete all old keys\n- set up auto decryption/mounting\n- add a backup passphrase\n- enroll the MOK key into the motherboard\n</code></pre> <p>after that restart the pc and enter the password you chose for the MOK key enrollment</p>"},{"location":"cb_docs/cb_guidelines/Git%20Guidlines/","title":"Git Guidlines","text":"<p>Branch Naming Conventions:</p> <ul> <li>master<ul> <li>has release versions</li> <li>tagged accordingly<ul> <li>e.g. rel-1.0</li> </ul> </li> </ul> </li> <li>dev branch<ul> <li>created from release branch</li> <li>combine new features</li> <li>kind of working but not as stable as release</li> <li>prepares for new release</li> </ul> </li> <li>feature branches<ul> <li>one branch for one new feature / addition you want to add</li> <li>created from dev branch and if needed kept up to date by release branch</li> <li>start with feat:<ul> <li>e.g. feat-cleanup</li> </ul> </li> </ul> </li> <li>hotfix branches<ul> <li>remove critical bugs in release or dev version.</li> <li>Only for small fixes, not for development</li> <li>if you commit proper tested code, you should rarely need a hotfix</li> </ul> </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/","title":"General Coding Rules &amp; Conventions","text":""},{"location":"cb_docs/cb_guidelines/clean_code/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Function names: <code>camelCase</code> </li> <li>ROS Callback functions: <code>functionCallback</code> </li> <li>Variable names: <code>snake_case</code> </li> <li>ROS Subscriber: <code>name_sub</code> </li> <li>ROS Publisher: <code>name_pub</code> </li> <li>ROS Client: <code>name_client</code> </li> <li>ROS Server: <code>name_server</code> </li> <li>Classes: <code>PascalCase</code> </li> <li>Constants: <code>ALL_CAPS</code> </li> <li>Class member variables:  </li> <li>C++ \u2192 <code>example_member_</code> (trailing underscore)  </li> <li>Python \u2192 <code>example_member</code> (no underscore)  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#indentation-spacing","title":"Indentation &amp; Spacing","text":"<ul> <li>Python: 4 spaces  </li> <li>C++: 2 spaces  </li> <li>No trailing spaces </li> <li>Blank line to separate logical sections  </li> <li>Line length: 100 characters max  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#brace-block-formatting","title":"Brace &amp; Block Formatting","text":"<ul> <li>C++: Allman style (opening brace on the next line)  </li> <li>Keep opening/closing braces aligned  </li> <li>Ensure blocks are clearly indented  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#commenting-style","title":"Commenting Style","text":"<ul> <li>Write why, not just what </li> <li>Use docstrings (Python) or Doxygen (C++) for public functions/classes  </li> <li>Use type hints (Python)  </li> <li>Always choose clear function names </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#function-class-size","title":"Function &amp; Class Size","text":"<ul> <li>Functions: ideally &lt; 20\u201330 lines </li> <li>Classes: ONE clear responsibility </li> <li>No hidden side effects \u2014 functions should only do what their name says  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#error-handling-exceptions","title":"Error Handling &amp; Exceptions","text":"<ul> <li>TBA </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#avoid-magic-numbersstrings","title":"Avoid Magic Numbers/Strings","text":"<ul> <li>Use named constants or enums instead of literal values  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#imports-includes","title":"Imports / Includes","text":"<ul> <li>Keep imports consistent </li> <li>Group in the following order:  </li> <li>Python: standard library \u2192 third-party \u2192 local imports  </li> <li>C++: standard library headers \u2192 project headers \u2192 local headers  </li> <li>No unused imports/includes  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#code-reviews-limit-enforcements","title":"Code Reviews &amp; Limit Enforcements","text":"<ul> <li>Follow formatter rules to enforce style consistency  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#c-specific-rules","title":"C++ Specific Rules","text":"<ul> <li>Initialization Rule: always initialize variables upon declaration  </li> <li>Pointers: prefer smart pointers \u2192 <code>std::unique_ptr</code>, <code>std::shared_ptr</code> </li> <li>Const-Correctness: use <code>const</code> for parameters and member functions when data is not modified  </li> </ul>"},{"location":"cb_docs/cb_guidelines/clean_code/#python-specific-rules","title":"Python Specific Rules","text":"<ul> <li>Follow PEP 8 for naming, imports, whitespace, docstrings  </li> <li>Avoid mutable default arguments </li> <li>Use immutable defaults (e.g., <code>None</code> instead of <code>[]</code> or <code>{}</code>)  </li> </ul>"},{"location":"cb_docs/cb_guidelines/project_management/","title":"GitHub Issues for Project Management","text":""},{"location":"cb_docs/cb_guidelines/project_management/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Creating Issues</li> <li>Working With Issues</li> <li>Working With Views</li> <li>Weekly Meetings</li> </ol>"},{"location":"cb_docs/cb_guidelines/project_management/#creating-issues","title":"Creating Issues","text":""},{"location":"cb_docs/cb_guidelines/project_management/#1-purpose-of-issues","title":"1. Purpose of Issues","text":"<p>Issues in GitHub are used to track tasks, enhancements, bugs, and other work items. We use the GitHub issues for our project managment and the GitHub Projects as our managment tool.</p>"},{"location":"cb_docs/cb_guidelines/project_management/#2-how-to-create-an-issue","title":"2. How to Create an Issue","text":"<ol> <li> <p>Create new issue</p> <p>a) Trough the Issues Tab: - Go to the repository where you want to create an issue - Click on the <code>Issues</code> tab - Click in the <code>New issue</code> button</p> <p>b) Trough the Project page - Go to the project page https://github.com/orgs/conbotics/projects/8/views/1 - Optionally: Navigate to the corresponding view - Click in the <code>Add item</code> button - Type in <code>#your_repository_name</code> and enter - Click on <code>Create new issue</code></p> </li> <li> <p>Fill in the Issue Details:</p> </li> <li>Title: Provide a concise and descriptive title</li> <li>Description: Use Markdown to format the description Include:<ul> <li>Purpose of the issue</li> <li>Detailed steps/requirements/tasks/problems</li> <li>Attachments or screenshots if necessary</li> </ul> </li> <li>Labels: Add relevant labels (e.g., bug, enhancement/feature)</li> <li>Assignees: Assign the issue to the responsible person</li> <li>Milestones: Link the issue to a milestone if applicable</li> <li>Projects: Add the issue to the project if not allready done</li> <li>Start: For bugs add the start date as the date the bug occured</li> <li>Priority: Define a priority for this task</li> <li>Development: Link a branch to the issue the bug/feature is fixed/implemented</li> <li>Deadline: This is sused to define the sprints, leaf this open if the task is not in the current sprint cycle (7days)</li> </ol> <p>Comment: If some of those options is not available, you can dial them in after creation of the issue</p> <ol> <li>Submit the Issue:</li> <li>Click on the <code>Submit new issue</code> button to create the issue.</li> </ol>"},{"location":"cb_docs/cb_guidelines/project_management/#working-with-issues","title":"Working With Issues","text":"<p>In the screenshot above you can see all the options for one issue. You can change all of them even after the creation of one issue. To transfer an issue to another repository click on <code>Transfer Issue</code> at the bottom of the issue page. If you want to set an issue to done, close it with a comment, the project automation will set it to done automatically. </p>"},{"location":"cb_docs/cb_guidelines/project_management/#working-with-views","title":"Working With Views","text":"<p>On the top bar you can switch between the predefined views. Each division has it's own view with sorting with proiority and as a kandban board. On the Bug view you can view the newest bugs. And in the sprint view all the current tasks are grouped together by date to the sprint goal date. Under your tasks you can see all the open tasks associated with you. You can also apply filters to the different views, but please discard the changes afterwards.</p>"},{"location":"cb_docs/cb_guidelines/project_management/#weekly-meetings","title":"Weekly Meetings","text":""},{"location":"cb_docs/cb_guidelines/project_management/#1-purpose-of-weekly-meetings","title":"1. Purpose of Weekly Meetings","text":"<p>To review progress, plan upcoming tasks, and address any blockers and know what the other devs are doing.</p>"},{"location":"cb_docs/cb_guidelines/project_management/#2-pre-meeting-preparation","title":"2. Pre-Meeting Preparation","text":"<ul> <li>Update Issues: Ensure all issues are updated with the latest status.</li> <li>Review Board: Check the project board and ensure all tasks are accurately represented.</li> </ul>"},{"location":"cb_docs/cb_guidelines/project_management/#3-meeting-agenda","title":"3. Meeting Agenda","text":"<ol> <li>Review Previous Week's Progress and Bugs (Done and Bug View):</li> <li>Discuss completed tasks </li> <li> <p>Explain the bugs that came up during the week </p> </li> <li> <p>Current Sprint Review (Sprint View):</p> </li> <li>Assess the status of ongoing tasks</li> <li> <p>Identify and address any blockers</p> </li> <li> <p>Plan for the Next Week:</p> </li> <li>Set the Deadline of onging tasks to the next weeks meeting date if they need more time</li> <li>Prioritize tasks for the upcoming week</li> <li>Assign the upcoming tasks</li> <li> <p>Set the deadline for the tasks to the next weeks meeting date</p> </li> <li> <p>Open Discussion:</p> </li> <li>Open the floor for any additional comments or concerns</li> </ol>"},{"location":"cb_docs/cb_guidelines/team_roles_and_responsibilities/","title":"Team roles and responsibilities","text":""},{"location":"cb_docs/cb_guidelines/team_roles_and_responsibilities/#field-engineer","title":"Field Engineer","text":"<p>Field Engineer</p>"},{"location":"cb_docs/cb_guidelines/code%20formatting/Installation/","title":"Using a Custom <code>.clang-format</code> in VS Code","text":""},{"location":"cb_docs/cb_guidelines/code%20formatting/Installation/#1-get-the-clang-format-file","title":"1. Get the <code>.clang-format</code> File","text":"<ul> <li>Copy the provided <code>.clang-format</code> file into your project\u2019s root directory.  </li> <li>Alternatively, place it in your home directory if you want it applied globally to all projects.</li> </ul>"},{"location":"cb_docs/cb_guidelines/code%20formatting/Installation/#2-install-required-extension","title":"2. Install Required Extension","text":"<ul> <li>In VS Code, go to Extensions Marketplace (<code>Ctrl+Shift+X</code> / <code>Cmd+Shift+X</code>).  </li> <li>Install C/C++ (ms-vscode.cpptools).  </li> <li>This extension enables <code>clang-format</code> support.</li> </ul>"},{"location":"cb_docs/cb_guidelines/code%20formatting/Installation/#3-tell-vs-code-to-use-clang-format","title":"3. Tell VS Code to Use <code>.clang-format</code>","text":"<ul> <li>VS Code will automatically detect the <code>.clang-format</code> file if it exists in the project root.  </li> <li>To verify it works:  </li> <li>Open a <code>.cpp</code> or <code>.h</code> file.  </li> <li>Run Format Document (<code>Ctrl+Shift+I</code> on Windows/Linux, <code>Shift+Option+F</code> on Mac), or Right-Click-&gt;Format-Document </li> <li>The formatting should follow the rules defined in your <code>.clang-format</code>.  </li> </ul>"},{"location":"cb_docs/cb_onboarding/dualboot_windows_ubuntu/","title":"Guide for installing dualboot windows + ubuntu","text":""},{"location":"cb_docs/cb_onboarding/dualboot_windows_ubuntu/#create-bootable-usb","title":"Create bootable USB","text":"<ol> <li>Download Ubuntu https://releases.ubuntu.com/focal/</li> <li>Flash the image with balena etcher or other flashing software</li> </ol>"},{"location":"cb_docs/cb_onboarding/dualboot_windows_ubuntu/#create-space-for-ubuntu","title":"Create Space for Ubuntu","text":"<ol> <li>Boot into Windows</li> <li>Open Disk Management (Win + X \u2192 Disk Management)</li> <li>Shrink the Windows partition to free up space for Linux</li> <li>Leave the unallocated space unformatted.</li> </ol>"},{"location":"cb_docs/cb_onboarding/dualboot_windows_ubuntu/#boot-into-ubuntu-installer","title":"Boot into Ubuntu Installer","text":"<ol> <li>Plug in your bootable USB</li> <li>Reboot and enter BIOS/UEFI (commonly F12, F2, DEL, or ESC during startup)</li> <li>Change boot order to boot from USB first</li> <li>Save and exit BIOS. The system should boot into the Linux installer</li> </ol>"},{"location":"cb_docs/cb_onboarding/dualboot_windows_ubuntu/#install-ubuntu-alongside-windows","title":"Install Ubuntu alongside Windows","text":"<ol> <li>Choose \"Install alongside Windows\" if the option is available</li> <li> <p>If not, choose \"Something else\" and manually:</p> <p>Select the unallocated space.</p> <p>Create at least:</p> <ul> <li> <p>/ (root) partition (ext4, 20+ GB)</p> </li> <li> <p>(Optional) swap partition (same size as your RAM or less)</p> </li> <li> <p>(Optional) /home partition for personal files</p> </li> </ul> </li> <li> <p>Proceed with installation. Install the GRUB bootloader (this manages OS selection at startup).</p> </li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding/","title":"Onboarding","text":"Task Status Notes 1. Did you receive an email? 2. Did you receive a key? 3. Did you receive a laptop? (optional) 4. Go through the team structure 5. Did you set up Teams? For casual communication 6. Did you set up absentify? For taking vacation / sick days etc 7. Did you join ClickUp? For the whole team milestones 8. Did you set up OneNote? For meeting notes 9. Did you set up NetBird? (software-only) For connecting with the robot 10. Did you set up KeePass? (software-only) For passwords 11. Read the User Manual To get an idea of the robot 12a. If you are in the software team head to software onboarding 12b. If you are in the hardware team head to hardware onboarding"},{"location":"cb_docs/cb_onboarding/onboarding/#software-onboarding","title":"Software onboarding","text":""},{"location":"cb_docs/cb_onboarding/onboarding/#hardware-onboarding","title":"Hardware onboarding","text":""},{"location":"cb_docs/cb_onboarding/onboarding_hardware/","title":"Hardware Onboarding","text":"<pre><code>Maler Roboter (Hardware System)\n\u251c\u2500\u2500 Base\n\u2502   \u251c\u2500\u2500 Base Cabinet Right (+B0)\n\u2502   \u2502   \u251c\u2500\u2500 PC\n\u2502   \u2502   \u251c\u2500\u2500 Jetson\n\u2502   \u2502   \u251c\u2500\u2500 Safety PLC\n\u2502   \u2502   \u251c\u2500\u2500 Contactor_1\n\u2502   \u2502   \u2514\u2500\u2500 Contactor_2\n\u2502   \u251c\u2500\u2500 Base Cabinet Left (+B1)\n\u2502   \u2502   \u251c\u2500\u2500 Controller\n\u2502   \u2502   \u251c\u2500\u2500 IMU\n\u2502   \u2502   \u251c\u2500\u2500 4 drivers for motors\n\u2502   \u2502   \u251c\u2500\u2500 DCDC Converter (48V/24V)\n\u2502   \u2502   \u251c\u2500\u2500 DCDC Converter (24V/12V)\n\u2502   \u2502   \u251c\u2500\u2500 Router\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 2 LTEs antennas: SIM for remote control from office\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 2.4GHz WLAN: For on-site normal operation\n\u2502   \u2502   \u251c\u2500\u2500 Bluetooth: For tablet (emergency / safety)\n\u2502   \u2502   \u251c\u2500\u2500 Switch (jetson, safety PLC, PC, lidar1/2, router)\n\u2502   \u2502   \u2514\u2500\u2500 Fans (filters for electromagnetic waves)\n\u2502   \u251c\u2500\u2500 Base Back Compartment (+B2)\n\u2502   \u2502   \u251c\u2500\u2500 Base PCB\n\u2502   \u2502   \u251c\u2500\u2500 Base Motor Controllers\n\u2502   \u2502   \u251c\u2500\u2500 Base Motor L\n\u2502   \u2502   \u2514\u2500\u2500 Base Motor R\n\u2502   \u251c\u2500\u2500 Base Front Compartment (+B3)\n\u2502   \u2502   \u251c\u2500\u2500 Main Power Switch\n\u2502   \u2502   \u251c\u2500\u2500 Airless Paint Spray System (Power Supply Unit)\n\u2502   \u2502   \u251c\u2500\u2500 DCDC Converter (DC48/AC230)\n\u2502   \u2502   \u2514\u2500\u2500 Fan\n\u2502   \u2514\u2500\u2500 Base Exterior (+B4)\n\u2502       \u251c\u2500\u2500 LIDARs (Front &amp; Back)\n\u2502       \u251c\u2500\u2500 Control Panel - Buttons: Emergency Stop, Confirm Button (for mode &amp; Switch ON),   \n\u2502       |   Mode Switch (Manual / Automatic)\n\u2502       \u2514\u2500\u2500 Router WiFi Antennas\n\u2514\u2500\u2500 Arm\n    \u251c\u2500\u2500 Arm Cabinet (+A0)\n    \u2502   \u251c\u2500\u2500 Arm Carrier PCB\n    \u2502   \u251c\u2500\u2500 Arm PCB\n    \u2502   \u2514\u2500\u2500 USB Hub\n    \u2514\u2500\u2500 Arm Exterior (+A1)\n        \u251c\u2500\u2500 Arm Motor M1/M4/M5\n        \u251c\u2500\u2500 Arm Motor M2/M3\n        \u251c\u2500\u2500 Arm LEDs\n        \u251c\u2500\u2500 Paint Spray System (Spray Gun/Servo)\n        \u2514\u2500\u2500 Cameras\n</code></pre>"},{"location":"cb_docs/cb_onboarding/onboarding_software/","title":"Software Onboarding","text":""},{"location":"cb_docs/cb_onboarding/onboarding_software/#install-ubuntu","title":"Install Ubuntu","text":"<p>Most of us use dual boot setup on our laptop. A quick tutorial how to set this up: Windows + Ubuntu Dualboot</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#install-system","title":"Install System","text":""},{"location":"cb_docs/cb_onboarding/onboarding_software/#option-1-auto-install","title":"Option 1 - Auto-install","text":"<p>To install everything, run:</p> <pre><code>bash install_all.sh\n</code></pre> <p>This will create the folder <code>~/workspace/catkin_ws</code> with all the required packages and dependencies for the system to run. If this doesn't work, then install manually with Option 2.</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#option-2-manual-install","title":"Option 2 - Manual install","text":"<ol> <li> <p>Install git on your system:</p> <p><code>sudo apt install git</code></p> </li> <li> <p>Generate ssh key and add them to your github account https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</p> </li> <li> <p>Install ros and catkin tools / robot folders     https://wiki.ros.org/noetic/Installation/Ubuntu</p> <p>https://catkin-tools.readthedocs.io/en/latest/installing.html</p> <p>https://github.com/fzi-forschungszentrum-informatik/robot_folders</p> </li> <li> <p>Clone Conbotics repositories and build</p> <p><code>git clone git@github.com:conbotics/cb_docker.git</code></p> <p>Execute the following scripts</p> <p><code>bash cb_docker/pull_repos.bash $catkin_ws</code></p> <p><code>bash cb_docker install_packages.bash</code></p> </li> <li> <p>Build your workspace with catkin build or makeros (if you use robot folders)</p> </li> <li> <p>Install docker</p> </li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#working-with-the-robot","title":"Working with the robot","text":"<p>Working on the robot allows us to test our code in a real environment. </p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#connect-to-the-robot","title":"Connect to the robot","text":""},{"location":"cb_docs/cb_onboarding/onboarding_software/#on-the-robot","title":"On the robot:","text":"<ol> <li>Turn the knob that connect the robot with the battery.</li> <li>Release breaks by pressing the green blinking button</li> <li>Press the same button fir 5sec to boot up PC and Jetson.</li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#on-your-laptop","title":"On your laptop","text":"<p>4a. Connect via the WiFi to the corresponding Wifi Network e.g. \"Rob4\" (Option A) 4b. Connect via NetBird (Option B):</p> <pre><code>netbird up\n</code></pre> <ol> <li>Connect to PC: <code>ssh conbotics@10.11.12.10</code> , connect to Jetson <code>ssh conbotics@10.11.12.40</code> (For vs code usage consider the  offical  documentation)</li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#basic-interaction-with-robot-in-the-command-line","title":"Basic interaction with robot in the command line","text":"<ol> <li>Connect to the robot's session. Run</li> </ol> <pre><code>cattach\n</code></pre> <p>For interfacing with the running ROS server, we use catmux. Upon startup, there is a catmux session running launched by the startup node. When pressing \"initialize\" in the  GUI, the respective windows for core, arm, base, etc. are added to the running session and closed upon \"de-initialize\". To view and scroll through the running session, the bash alias <code>cattach</code> (for <code>catmux attach</code>) can be used. This opens a separate catmux session that is linked to the original one. The advantage of this is that all users can have their separate session running, meaning they can scroll and navigate through the windows independently. Exiting the session can be done with <code>ctrl + b</code> <code>d</code>.</p> <p>If you really want to attach to the original session for whatever reason, use <code>catmux attach</code> or <code>catmux attach -t catmux</code>. Be careful as the <code>ctrl + b</code> <code>d</code> command has been remapped to killing the entire session (so that the sessions opened by <code>cattach</code> don<code>t accumulate). To detach, do</code>ctrl + b<code>and type</code>:detach` followed by enter.</p> <p>To scroll and have the process continue at the same time, at least <code>tmux 3.2</code> is necessary (see here). The newest version can be installed using this script.</p> <ol> <li>Either use the tablet, or in the cb_ui_app, run:</li> </ol> <pre><code>docker compose up\n</code></pre> <p>go to http://localhost:5173, and set the correct Robot IP to start working with the robot. 3. Press <code>Initialize</code> 4. You may now interact with the robot.</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#additionally-for-a-painting-job","title":"Additionally, for a painting job:","text":"<ol> <li>Go to <code>Position</code></li> <li>Clean/Empty the water/paint</li> <li>Go to <code>home position</code>.</li> <li>Set the Wagner pressure (170 Bars).</li> <li>Start the process or run a test.</li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#robot-folders-on-the-robots","title":"Robot Folders on the Robots","text":"<p>The operating system of the robots launches by default the roscore, startup node and the catmux session. This process are called from the default robot folders environment <code>robot_wss/develop</code>. To add a new environmnt use <code>fzirob add_environment my_env</code> and then source it with <code>ce my_env</code>. Then you can copy the source to your environment like so: <code>cp -r ~/robot_wss/develop/catkin_ws/src ~/robot_wss/my_env/catkin_ws/src</code>. After copying <code>src</code> you can build the code with the command <code>makeros</code>, which can be called from any location in the file system, if you have sourced the environment before. Finally, you can now kill the running startup node, source again (necessary again after build), start a new startup node and catmux session with running the command <code>robce my_env</code>. </p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#commiting-on-the-robot","title":"Commiting on the robot","text":"<p>wip</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#shut-down-and-prepare-for-next-person","title":"Shut down and prepare for next person","text":"<ol> <li>Set all the branches back to <code>develop</code> or change the robot folders environment back to develop</li> <li>Build if you have changed the branches on the robot</li> <li>Execute <code>runterfan</code> on the robot to shut it down</li> <li>Wait until the PC and the Jetson</li> </ol>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#environment-variables","title":"Environment variables","text":"<p>To work on the robot, one must first define the ARM_NUMBER (03, 04, 05) and BASE_NUMBER environment variable. These refer to the version of the arm and base respectively. Each one of the real robots, have these variables hardcoded in their /home dir.</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#best-practices","title":"Best practices","text":""},{"location":"cb_docs/cb_onboarding/onboarding_software/#git-guidelines","title":"Git Guidelines","text":"<p>We use a feature-branch workflow for all of our git repos. The convestions can be fstepsound here</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#project-management","title":"Project Management","text":"<p>We use Github issues and the Project view for our software project management. An introduction to that can be found here</p> <p>For the interdisciplinary meetings and company overview we use Clickup</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#clean-code","title":"Clean code","text":"<p>For better code quality please consider Clean Code. We wrote down some usefull Guidelines and bes pratices for that.</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#documentation","title":"Documentation","text":""},{"location":"cb_docs/cb_onboarding/onboarding_software/#base","title":"Base","text":"<p>Base Documentation</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#arm","title":"Arm","text":"<p>Sprayarm Docs</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#core","title":"Core","text":"<p>Core Documentation</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#vision","title":"Vision","text":"<p>Vision Docs</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#ui","title":"UI","text":"<p>UI Repo</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#simulation","title":"Simulation","text":"<p>Simulation Docs</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#spraying","title":"Spraying","text":"<p>Spray Documentation</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#network-structure","title":"Network &amp; Structure","text":"<p>Network Diagram</p> <p>Netbird (for remote access to teh robots)</p> <p>Software Architecure</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#error-handling","title":"Error handling","text":"<p>Error documentation</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#robot-cleaning","title":"Robot cleaning","text":"<p>Cleaning Instructions Putzanleitung</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#password-management","title":"Password Management","text":"<p>For password managament we use KeePassXC. The database is stored here, for the Password and key file ask one of the employees.</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#tools","title":"Tools","text":"<p>Collection of tools and developer stuff we are using, feel free to use the same or get yourself inspired for handy tools:</p> <p>https://github.com/conbotics/cb_tools</p> <p>https://github.com/conbotics/cb_tools/blob/master/tools.md</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#tutorials","title":"Tutorials","text":"<p>For ssd backup: Clonezilla</p> <p>For adapting the timings Timings</p>"},{"location":"cb_docs/cb_onboarding/onboarding_software/#storage","title":"Storage","text":"<p>NAS: used for rosbags vision datasets: Nas Tutorial</p> <p>Cloud storage: Used for lager files to backup them online: Onedrive link</p> <p>Meetings: Onenote notebook for all our meetings Onenote</p>"},{"location":"cb_docs/cb_sim/sim_doc/","title":"Documentation","text":""},{"location":"cb_docs/cb_sim/sim_doc/#table-of-contents","title":"Table of Contents","text":""},{"location":"cb_docs/cb_sim/sim_doc/#1-set-up","title":"1. Set-Up","text":""},{"location":"cb_docs/cb_sim/sim_doc/#2-startrun","title":"2. Start/Run","text":""},{"location":"cb_docs/cb_sim/sim_doc/#3-debugging","title":"3. Debugging","text":""},{"location":"cb_docs/cb_sim/sim_doc/#1-set-up_1","title":"1. Set-Up","text":"<p>make sure following repos are checked out under simulation branch feat-sim:</p> <ol> <li>cb_sprayarm</li> <li>cb_base - is right now on <code>fix-sim-odometry</code></li> <li>cb_bringup</li> <li>cb_config</li> <li>cb_core</li> <li>cb_vision</li> </ol> <p>Make sure both <code>simulation</code> flags (<code>config/general/process/simulation</code> and <code>config/sprayarm/settings/simulation</code>) are set to <code>true</code> inside <code>cb_config/process_configs/process.yaml</code></p>"},{"location":"cb_docs/cb_sim/sim_doc/#odometry-tuning","title":"Odometry tuning","text":"<ul> <li>config file for odometry (I.e. which odometry topics to use) is located in <code>/cb/base/cb_navigation/cb_perception/config/ukf/ukf_cfg_tuned.yaml</code></li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#camera-set-up","title":"Camera Set-Up","text":"<ul> <li>Inside <code>cb_sprayarm_description/urdf/modules</code> open gazebo.xacro</li> <li>This file configures the Gazebo simulation of the spray arm robot, defining materials, integrating ROS control, and setting up two depth cameras with specific parameters (FOV, resolution, update rate, clipping) and plugins to publish depth and point cloud data to ROS topics.</li> </ul> <p>Camera semantic segmentation - <code>cb_gazebo_plugins/src/gazebo_ros_semantic_camera.cpp</code></p>"},{"location":"cb_docs/cb_sim/sim_doc/#creating-new-worlds","title":"Creating new worlds","text":"<p>start gazebo standalone (so add. models I.e. Base, wheels etc. dont get loaded in and metrics get saved in world file)</p> <pre><code>/usr/bin/gazebo ~/catkin_ws/src/cb_base/cb_base_gazebo/worlds/room_90s.world\n</code></pre> <p>(removed gazebo alias - command gazebo works again)</p> <ul> <li>Place objects I.e. boxes - transform S/R/T (Scale/Rotation/Translation)</li> <li>After editing - save as new world. Edit Labels accordingly in the <code>.world</code> file for semantic segmentation.</li> </ul> <p>Labels are: wall; ceiling; floor; other; door; window; person; suv; sprayarm</p>"},{"location":"cb_docs/cb_sim/sim_doc/#current-ipsaddresses","title":"Current IP's/Addresses","text":"<ul> <li><code>192.168.1.101</code> - local ip</li> <li><code>100.114.232.9</code> - netbird ip</li> <li><code>http://localhost:5173/</code> - gui</li> <li><code>http://172.18.0.2:5173/</code> - gui - remote access?</li> <li><code>http://localhost:8081</code> - gzweb</li> <li><code>http://192.168.1.101:8081</code> - local gzweb access</li> <li><code>http://100.114.232.9:8081</code> - remote gzweb access</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#2-startrun-the-simulation","title":"2. Start/Run the simulation","text":""},{"location":"cb_docs/cb_sim/sim_doc/#21-local","title":"2.1 local","text":"<ul> <li>Start Docker Container:</li> </ul> <pre><code>start_ros\n</code></pre> <ul> <li>Join Docker Container from other sessions:</li> </ul> <pre><code>join_ros\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#how-to-start-gazebo-simulation-pipeline","title":"How to start gazebo simulation pipeline","text":"<ul> <li>Start the GUI-bridge in the first session:</li> </ul> <pre><code>bridge\n</code></pre> <p>launches: <code>roslaunch cb_bringup startup_node.launch</code></p> <ul> <li>Start simulation pipeline in another docker session:</li> </ul> <pre><code>gazebo_pipe\n</code></pre> <p>launches: <code>roslaunch cb_bringup start_all_gazebo.launch</code></p> <ul> <li>Set wall height under <code>settings for all walls</code> in the GUI</li> <li>Wait for a few seconds (~5 sec), then press the play button in gazebo (lower left hand corner)</li> <li>Access the GUI</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#22-remote-headless-mode","title":"2.2 remote (headless-mode)","text":"<pre><code>ssh conbotics@192.168.1.101\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#ssh-session-1","title":"ssh session #1","text":"<pre><code>start_ros_hl\n\nbridge\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#ssh-session-2","title":"ssh session #2","text":"<pre><code>join_ros_hl\n\nexport DISPLAY=:1\n\ngazebo_pipe\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#local-session","title":"local session","text":"<pre><code>export ROS_MASTER_URI=http://192.168.1.101:11311\nexport ROS_IP=&lt;&lt;remote-ip&gt;&gt;\n\nrviz\n</code></pre> <ul> <li>for future comfort - add a function to your bash script:</li> </ul> <pre><code>roslocal() {\n        export ROS_IP=192.168.1.253\n        export ROS_MASTER_URI=http://192.168.1.101:11311/\n        echo \"$ROS_IP\"\n        echo \"$ROS_MASTER_URI\"\n}\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#ssh-session-3","title":"ssh session #3","text":"<p>start the simulation by entering the following ros call:</p> <pre><code>rosservice call /gazebo/unpause_physics \n\n                /  ... /pause_physics - to pause the simulation\n</code></pre> <ul> <li>in Rviz set fixed frame inside the global options header to map</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#ssh-session-4-gazebo-streaming","title":"ssh session #4 (Gazebo streaming)","text":"<p>start the streaming client for Gazebo</p> <pre><code>gzweb\n</code></pre> <p>launches: <code>cd ~/gzweb &amp;&amp; npm start -p 8081</code></p>"},{"location":"cb_docs/cb_sim/sim_doc/#3-debugging_1","title":"3. Debugging","text":"<p>For Debugging purposes - if a plotting tool is required - look no further and use <code>PlotJuggler</code>.</p> <pre><code>rosrun plotjuggler plotjuggler\n</code></pre> <p>Can plot any topic - odometry, covariances etc...</p> <p> - great for analyzing causation and correlation - there is already an extensive config file for odometry testing inside <code>cb_bringup/config/plotjuggler/odometry_sim_2.xml</code></p>"},{"location":"cb_docs/cb_sim/sim_doc/#related-issues","title":"Related Issues","text":""},{"location":"cb_docs/cb_sim/sim_doc/#issue-1-shift-in-odometry","title":"Issue #1 - Shift in Odometry","text":"<ul> <li>Odometry \"stutters/jitters\" with bigger \"hickups\" occasionally happening</li> </ul> <p>related warning/info: Getting odometry callbacks and found error</p> <ul> <li><code>/spraybot/navigation/long_base_motion_server</code></li> <li><code>/spraybot/navigation/weighted_pid</code></li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#status","title":"Status:","text":"<ul> <li>Still occurs occasionally</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#issue-2-angular-offset-of-octomap","title":"Issue #2 - Angular offset of Octomap","text":"<ul> <li>angle error gets worse over time as the odometry \"jitters\" carry on </li> <li>there are parts of the message that show an accurate representation - likely stemming from older scans/messages</li> </ul> <p>Affected topics: <code>/spraybot/perception/slam_rt/cloud_map</code> &amp; <code>/spraybot/perception/slam_rt/octomap_full</code> </p> <p> </p>"},{"location":"cb_docs/cb_sim/sim_doc/#status_1","title":"Status:","text":"<ul> <li>I used plotjuggler to analyze the odometries behaviour - on the right is the resulting odometry post kalman fusion - on the left the individual topics that make up the fusion</li> <li>I found the wheel odometry was publishing a topic regarding rotation (yaw) that only published 0 - making the resulting odometry oscillate between 0 and another odometry part values</li> </ul> <p>Affected topics: <code>yaw; yaw velocity</code></p> <p></p> <ul> <li>Wheel odom for yaw and vel.-yaw was included in the ukf_cfg_tuned.yaml</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#issue-3-misallignment-of-robot-towards-wall","title":"Issue #3 - Misallignment of robot towards wall","text":"<ul> <li>paint process aborts with an error due to robot gradually aligning with the \"warped\" wall<ul> <li>no feasible path can be found</li> </ul> </li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#status_2","title":"Status:","text":"<ul> <li>After testing the odometry topics and excluding possible faulty topics - the angular offset has vanished but the translatory offset still appears sometimes</li> <li>Error somewhat persists - does not occur as often</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#issue-4-wall-on-the-right-of-the-robot-shows-1-big-hole","title":"Issue #4 - Wall on the right of the robot shows 1 big hole","text":"<ul> <li>to me this issue seems related to the arm \"projection\" removal - as that wall section starts off as being represented correctly for the most part</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#status_3","title":"Status:","text":"<p>For reasons beyond me that does not seem to be a problem anymore. </p>"},{"location":"cb_docs/cb_sim/sim_doc/#issue-5-faulty-segmentation","title":"Issue #5 - faulty segmentation","text":"<ul> <li>arbitrary point classes are assigned - see image</li> <li>(used camera plugin: <code>libgazebo_ros_semantic_camera</code>)</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#status_4","title":"Status:","text":"<p>Fixed by editing the semantic camera plugin node code. Didnt register objects for segmentation if the Label had uppercase spelling.</p> <p>New World including \"windows\" :</p> <p>  - lower image still shows a faulty \"projection\" onto wall cloud but that is of no consquence ...</p> <p>##### Sub-Issue:     - Segmentation of arm in the image gets projected onto wall. I.e. Arm removal in image (masking) isint working yet.        - Arm segmentation color-mapping set to wall color for now.</p>"},{"location":"cb_docs/cb_sim/sim_doc/#issue-6-missing-camera-alignment","title":"Issue #6 - missing camera alignment","text":"<ul> <li> <p>robot does not drive parallel to the wall - instead it does the corner alignment and starts the paint process from there on out</p> </li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#status_5","title":"Status:","text":"<ul> <li>as of now, robot performs camer alignment - this was possibly due to <code>use_fake_states</code> being turned on in the <code>process.yaml</code> </li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#minor-issues","title":"Minor Issues","text":""},{"location":"cb_docs/cb_sim/sim_doc/#missing-base-model-in-gzweb","title":"Missing Base Model in gzweb","text":"<ul> <li> <p>since base isint part of gazebos model inventory - it needs to be hosted as part of the local models</p> </li> <li> <p>before re-deploying gzweb with the <code>-m</code> flag - the GAZEBO_MODEL_PATH needs to be set and the models need to be in that directory - or atleast a simlink - preferrably of the package containing the meshes (no path change in urdf/xacro needed then)</p> </li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#missing-projection-removal-of-sprayarm","title":"Missing projection removal of sprayarm","text":"<ul> <li>since the sprayarm enters the field of view occasioanlly - it gets projected onto the segmented image</li> <li>there is a projection removel mask in place - which isint yet working for the simulation</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#gui-shows-disconnected","title":"GUI shows Disconnected","text":"<ul> <li>GUI shows on every second or so bridge startup Disconnected as status</li> <li>if you then close the bridge <code>Ctrl+c</code> and let it properly close</li> <li>the next bridge execution will then perform as expected</li> <li>requests such as refreshing the page are registered in bridge session</li> </ul> <p>[bot_release-14] process has finished cleanly log file: /home/conbotics/.ros/log/ce145aae-a8f6-11f0-9293-849e56028e8b/bot_release-14*.log - seems to be a marker for the bridge being able to establish a connection</p>"},{"location":"cb_docs/cb_sim/sim_doc/#gazebo-not-properly-starting","title":"Gazebo not properly starting","text":"<ul> <li>Link connector for gazebo pipeline does not always start</li> <li>gzweb cant be started - physics cant be unpaused</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#active-warningserrors","title":"Active Warnings/Errors","text":""},{"location":"cb_docs/cb_sim/sim_doc/#gazebo-related","title":"Gazebo related:","text":"<p>libGL error: failed to create dri screen libGL error: failed to load driver: nouveau</p> <p>[ERROR] [/gazebo:116]: No p gain specified for pid.  Namespace: /sprayarm/gazebo_ros_control/pid_gains/m1_joint   - all throughout joints m1 to m5</p> <p>[ERROR] [/gazebo:116]: No p gain specified for pid.  Namespace: /spraybot/base/gazebo_ros_control/pid_gains/spraybot/base/drive_wheel_left_joint   -for both left and right wheel joint</p>"},{"location":"cb_docs/cb_sim/sim_doc/#others","title":"Others:","text":"<p>[INFO] [/spraybot/navigation/weighted_pid:394]: Getting odometry callbacks and found error.</p> <p>[INFO] [/spraybot/navigation/long_base_motion_server:407]: Getting odometry callbacks and found error.</p> <p>[WARN] (2025-09-26 13:07:36.470) SensorData.cpp:762::uncompressDataConst() Requested laser scan data, but the sensor data (42) doesn't have laser scan.</p>"},{"location":"cb_docs/cb_sim/sim_doc/#to-do","title":"TO-DO:","text":""},{"location":"cb_docs/cb_sim/sim_doc/#focus","title":"Focus:","text":"<p>I will conclude with the issues that are the most pressing and that still persist:</p>"},{"location":"cb_docs/cb_sim/sim_doc/#odometry","title":"Odometry","text":"<p>Wheel odometry for translatory x and y values slowly converges (either up or down) odometry output of ICP loc. gets too much focus/importance as fusion preferrs ICP values   - covariances?</p>"},{"location":"cb_docs/cb_sim/sim_doc/#tasks","title":"Tasks:","text":"<ul> <li>include gzweb in startup node of gazebo (gazebo needs to be launched beforehand)</li> <li>further analyze odometry topics and document</li> <li>fix model hosting for gzweb (gazebo models are cloned into gazebo_models)</li> <li>create a new world including obstacles and feasible wall changes</li> <li>GPU ray sensor - <code>gpu_ray</code>- gpu based ray casting/sensoring</li> </ul>"},{"location":"cb_docs/cb_sim/sim_doc/#know-how","title":"Know-How:","text":""},{"location":"cb_docs/cb_sim/sim_doc/#how-to-convert-modular-urdf-ie-multiple-xacros-into-sdf","title":"How to convert modular URDF (I.e. multiple xacros) into .SDF","text":"<ul> <li>.sdf folder structure (preferred type for gzweb)</li> <li> <p>GAZEBO_MODEL_PATH/cb_base/</p> <ul> <li>meshes</li> <li>materials</li> <li>model.config</li> <li>cb_base.sdf</li> </ul> </li> <li> <p>convert xacro -&gt; urdf -&gt; sdf (model paths in sdf should be relative to GAZEBO_MODEL_PATH)</p> </li> </ul> <pre><code>xacro cb_base.xacro use_link_attacher:=false &gt; cb_base.urdf\n\ngz sdf -p cb_base.urdf &gt; cb_base.sdf\n</code></pre> <ul> <li>set: </li> </ul> <pre><code>export GAZEBO_MODEL_PATH=~/catkin_ws/src/cb_base/cb_base_description/models\n</code></pre> <ul> <li>python not set inside Container so use python3 as default:</li> </ul> <pre><code>sudo ln -s /usr/bin/python3 /usr/bin/python\n</code></pre> <ul> <li>navigate to gzweb - use: </li> </ul> <pre><code>npm run deploy --- -m\n</code></pre> <p></p>"},{"location":"cb_docs/cb_sim/sim_doc/#gzweb-set-up","title":"GZWEB Set-Up","text":"<p>(TO-DO: needs to be included in dockerfile) - DONE</p> <ul> <li><code>GAZEBO_MODEL_PATH</code> needs to be set prior to using the deploy command</li> <li>all subsequent builds dont need the <code>-m</code>flag - it grabs all the models both locally and from the remote model database.</li> <li>GZWEB needs the \"unique\" models I.e. the ones that werent sourced/build from gazebo assets in a specified location to host them. (Sim link should be enough)</li> <li>Affected are the .STL files in the meshes directory</li> <li><code>&lt;mesh filename&gt;</code>inside <code>cb_base/cb_base_description/urdf/modules</code> for both <code>body.xacro</code> and <code>caster_wheel.xacro</code> need to be adapted</li> </ul> <pre><code>sudo apt install libjansson-dev imagemagick\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n\nsource ~/.bashrc\n\nnvm install 8\n  (use 10 - 8 didnt work for me...)\n\ngit clone https://github.com/osrf/gzweb &amp;&amp; cd ~/gzweb\n\ngit checkout gzweb_1.4.1\n\nsource /usr/share/gazebo/setup.sh\n\nnpm run deploy --- -m\n</code></pre>"},{"location":"cb_docs/cb_sim/sim_doc/#gzweb-usage","title":"GZWEB Usage","text":"<pre><code>cd ~/gzweb\n\nnpm start -p 8081\n  (idk why but port 8080 is not open for use)\n</code></pre> <p>hosted site: http://localhost:8081/</p>"},{"location":"cb_docs/cb_sim/simulation/","title":"Simulation","text":"<p>As of the date of this commit, the following should function, assuming you have all the relevant repositories, dependencies from the setup, and initial ros setup complete.</p>"},{"location":"cb_docs/cb_sim/simulation/#to-run-the-system-on-a-gazebo-simulation","title":"To run the system on a Gazebo simulation:","text":"<ol> <li>This step is only necessary until the simulation branch is merged into develop, change the following repositories in your workspace to the branch <code>feat-sim</code>:</li> <li>cb_base</li> <li>cb_bringup</li> <li>cb_config</li> <li>cb_core</li> <li>cb_sprayarm_description</li> <li>cb_vision</li> </ol> <p>To checkout to the corresponding branch in all the repositories:</p> <pre><code>vcs custom --args checkout feat-sim\n</code></pre> <ol> <li>Make sure your bash environment has the variables <code>ARM_NUMBER</code>, <code>BASE_NUMBER</code>, and <code>ROBOT_NUMBER</code> set.</li> </ol> <pre><code>eg.\nexport ARM_NUMBER=04\nexport BASE_NUMBER=04\nexport ROBOT_NUMBER=04\n</code></pre> <ol> <li> <p>In a terminal window, run <code>roslaunch cb_bringup startup_node.launch</code>.</p> </li> <li> <p>To visualize in rviz:</p> </li> </ol> <pre><code>rviz -d ./src/cb_bringup/config/rviz_config/3d_visualizer.rviz\n</code></pre> <ol> <li>To control via the GUI app, build the UI on your machine, and run it in a terminal window. In the cb_ui_app folder, run:</li> </ol> <pre><code>docker compose up\n</code></pre> <ol> <li> <p>In a browser, go to the address <code>http://localhost:5173</code> to view the app ,and from the splash screen, go to the Settings, and change the Robot IP to <code>localhost</code>. If you press the <code>Start</code> button now, it should say <code>Connected</code> in the top left corner.</p> </li> <li> <p>On your machine, go to the file <code>cb_config/process_configs/process.yaml</code> and change the parameter <code>config/general/process/simulation</code> and <code>config/sprayarm/settings/simulation</code> to <code>True</code>.</p> </li> <li> <p>Run the Gazebo launch file:</p> </li> </ol> <pre><code>roslaunch cb_bringup start_all_gazebo.launch\n</code></pre> <p>Wait until you see <code>[attach_sprayarm-9] process has finished cleanly</code> before unpausing the Gazebo simulation.</p> <ol> <li>You should be able to use the simulation now.</li> </ol>"},{"location":"cb_docs/cb_sim/simulation/#to-run-only-the-arm","title":"To run only the arm:","text":"<pre><code>roslaunch cb_bringup start_sprayarm_sim.launch\n</code></pre> <p>Notes: - maybe this is needed in cb_sprayarm_description/urdf/modules/m2_axis.xacro:</p> <pre><code>&lt;dynamics damping=\"30.0\" friction=\"30.0\"/&gt;\n</code></pre>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/","title":"cb_sprayarm packages overview","text":"<p>This workspace contains packages for controlling and simulating the spray arm robot. Below is a brief description of each package/folder and important notes for running the system.</p>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/#software-architecture","title":"Software Architecture","text":"<pre><code>graph BT\n    subgraph Low Level\n        CAN[cb_canopen_motor_node]\n    end\n    subgraph ROS Control\n        HW[cb_hardware_interface]\n        CONTROL[cb_sprayarm_control]\n    end\n    subgraph MoveIt\n        KIN[cb_kinematics]\n        KINP[cb_kinematics_plugin]\n        MOVEITP[cb_moveit_plugins]\n    end\n    subgraph Planning &amp; Execution\n        MI[cb_motion_interface]\n        CEIL[cb_ceiling_spray]\n    end\n    subgraph Config\n        MOVEITCFG[cb_sprayarm_moveit_config]\n        TIMINGS[cb_sprayarm_timings]\n    end\n    subgraph Application\n        PLANNING[cb_sprayarm_planning]\n    end\n    subgraph Launch/Simulation\n        GAZEBO[cb_sprayarm_gazebo]\n        SETUP[cb_sprayarm_setup]\n    end\n\n    CAN --&gt; HW\n    HW --&gt; CONTROL \n    CONTROL --&gt; KINP\n    KIN --&gt; KINP\n    KINP --&gt; MI\n    MI --&gt; MOVEITP\n    MOVEITP --&gt; MOVEITCFG\n    MI --&gt; TIMINGS\n    KINP --&gt; MOVEITCFG\n\n    MOVEITP --&gt; PLANNING\n    MOVEITP --&gt; CEIL\n\n    MOVEITCFG --&gt; SETUP\n    SETUP --&gt; GAZEBO\n</code></pre>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/#package-descriptions","title":"Package Descriptions","text":"<ul> <li> <p>cb_canopen_motor_node   Contains nodes and code for interfacing with motors via the CANopen protocol. Used for low-level motor control and communication. Adaption of canopen_motor_node from ros_canopen</p> </li> <li> <p>cb_ceiling_spray   Implements the main logic for the ceiling spray application, including the core node that manages spraying actions.</p> </li> <li> <p>cb_hardware_interface   Provides hardware interface classes and nodes for integrating the spray arm hardware with ROS control and MoveIt. It uses configuration files (such as the joint limits) from cb_config.</p> </li> <li> <p>cb_kinematics   Contains custom inverse and forward kinematics for the spray arm, used for motion planning and control. It does not directly interface with MoveIt or ROS but the inverse kinematics is used through the cb_kinematics_plugin.</p> </li> <li> <p>cb_kinematics_plugin   Implements a MoveIt kinematics plugin for the spray arm, allowing custom kinematics to be used in MoveIt motion planning.</p> </li> <li> <p>cb_motion_interface   Provides high-level motion planning and execution for the spray arm, integrating with MoveIt! and the rest of the ROS system. Specifically, it:</p> </li> <li>Plans and executes application specific arm motions (normal, forward kinematics and spray lines).</li> <li>Capable of selecting an appropriate planner and retrying if a planner fails.</li> <li>Dynamically updates planning parameters (timings, angles) via dynamic reconfigure</li> <li>Manages the MoveIt! planning scene with collision objects and workspace constraints for safe planning. Adapts the planning scene based on the planning request or based on additional rostopics.</li> <li>Synchronizes nozzle (spray) commands with arm trajectories by calculating the timings (planSprayTrajectory) to trigger on/off the valve based on the planned trajectory. It does so by using the planned instead of the real trajectory. This has to be changed.</li> <li>Publishes planned trajectories for visualization in RViz</li> <li>Offers services and interfaces for moving to home position, planning spray lines, and more.</li> </ul> <p>While planning motion trajectories (without spray application) is done using MoveIt! and OMPL, planning a spray line is done by <code>cb_trajectory_planner.cpp</code> which is responsible for:   - generating smooth, feasible joint trajectories, taking into account safety and limits.   - handling acceleration/deceleration and nozzle synchronization.   - providing utility functions for trajectory processing.</p> <ul> <li>cb_moveit_plugins   Contains custom MoveIt! plugins/capabilities (e.g., planners, controllers, or sensors) tailored for the spray arm. These include:</li> <li>Triggering the spray valve capability.</li> <li>Control the robot arm with a jog (manually).</li> <li>Simple: Moves (both planning and execution) the robot arm.</li> <li> <p>Velocity: Moves (both planning and execution) the robot arm to the home position, based on velocity control. (Not used)</p> </li> <li> <p>cb_sprayarm_control   Implements and configures controllers to run the sprayarm (see Ros Control).   Custom controllers we implement: PLC sprayarm Controllers for handling the emergency state.  </p> </li> <li> <p>cb_sprayarm_gazebo   Simulation package for running the sprayarm in Gazebo, loading the robot model and simulation plugins.</p> </li> <li> <p>cb_sprayarm_moveit_config   MoveIt configuration package for the spray arm, including move group and MoveIt! setup files.</p> </li> <li> <p>cb_sprayarm_planning   Implements planning algorithms and nodes specific to the spray arm\u2019s tasks (e.g. path planning for spraying).    When a planning request comes in (for movement, forward kinematics, or spray), the plan manager computes a hash key based on the request parameters (eg start and goal states). It checks if a plan with that key already exists in a cache (map). If yes, it retrieves it and returns the cached plan (no need to plan again). Otherwise computes a new plan, and stores it for future use. Using the hash value you can manually retrieve and then visualize a previous plan, by using either of the following services, depending if it's a normal, a forward kinematic, or a spray movement:</p> </li> <li>from_map_movement_server_</li> <li>from_map_fk_server_</li> <li>from_map_spray_server_</li> </ul> <p>You can force plan, instead of using a previous hashed plan, by setting the ROS parameter <code>/config/sprayarm/settings/force_plan</code> to <code>true</code>. The relevant configuration for it, can be found in <code>cb_config/process_configs/process.yaml</code>.</p> <p>The three types of motions implemented so far are:   - Normal movements (OMPL Planner): Standard motion plans generated by MoveIt using the OMPL library, for moving the arm from one pose to another, avoiding obstacles and following constraints.   - Forward kinematics movement: Moves the arm by directly specifying joint values (planning in the joint - not cartesian space). It computes the resulting end-effector pose given the joint values. Useful for precise joint control. If the <code>specify_start</code>  variable, is set to true, then you have to specify the start position, otherwise it uses the current one.   - Sprayline movements: Motion planning for following a spray line or pattern. It consists of a list of pairs (a, b), where a is the trigger on position and b the trigger off position for the spray valve.</p> <p>Another important configuration that this package uses is the <code>cb_config/arm_configs/arm_*/timings.yaml</code>. The spray valve is triggered based on time (rather than coordinates). In this configuration file, you may change the start/stop valve timings for each side (left/right), for each movement (up/down), as well as the angle of the valve (may be different than 90 degrees due to a hardware offset) and the servo (which won't be necessary from arm06 onwards).</p> <ul> <li>cb_sprayarm_setup   Contains launch files and setup scripts for bringing up the entire spray arm system, both in simulation and on real hardware. </li> <li> <p><code>cb_sprayarm.launch</code> is the main launch file.</p> </li> <li> <p>cb_sprayarm_timings   Provides timing calculations and utilities, to make calibrating the timings easier. The UI calibration feature also uses this.</p> </li> </ul>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/#dependencies","title":"Dependencies","text":"<p>The robot urdf model and srdf description is not part of the cb_sprayarm repository anymore but is now located inside cb_sprayarm_description.  All dependencies: - cb_sprayarm_description: Urdf and srdf files for the robot</p> <ul> <li> <p>cb_msgs: Custom ros msg types</p> </li> <li> <p>cb_config: Configuration files for specific hardware. One Arm and one Base has to be selected by setting the environment variables <code>ARM_NUMBER=04</code> and <code>BASE_NUMBER=04</code> (or different numbers)</p> </li> <li> <p>cb_utils: independent functions like macros for urdf or colors for printouts</p> </li> </ul>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/#running-the-system","title":"Running the System","text":"<p>The arm can be loaded without further functionality from the <code>cb_sprayarm_setup</code> repository:</p> <ul> <li> <p>Simulation:     To start the system in an rviz simulation:</p> <p><code>roslaunch cb_sprayarm_setup cb_sprayarm_fake_rviz.launch</code></p> <p>Make sure to set required ROS parameters (see launch file documentation or add missing params as needed).</p> </li> <li> <p>Real Hardware: </p> <p><code>roslaunch cb_sprayarm_setup cb_sprayarm.launch</code></p> <p>Ensure all hardware interfaces are connected and configured.</p> </li> <li> <p>Gazebo: </p> </li> </ul> <p>Use <code>cb_sprayarm_gazebo</code> for running the robot in simulation with physics.</p> <p>If the arm you want to run a full simulation or start the real arm you need more repositories like cb_core, cb_bringup and more.</p> <ul> <li> <p>Testing simulation in rviz: </p> <p><code>roslaunch cb_bringup start_sprayarm_sim.launch</code></p> </li> <li> <p>Gazebo simulation: <code>roslaunch cb_bringup start_sprayarm_gazebo.launch</code></p> </li> <li> <p>**Standalone real arm on test stand: **</p> </li> </ul> <p><code>roslaunch cb_bringup start_sprayarm_real_standalone.launch</code></p> <ul> <li>**Real Arm on Robot: **</li> </ul> <p><code>roslaunch cb_bringup start_sprayarm_real.launch</code></p> <ul> <li>**Start full robot: **</li> </ul> <p><code>roslaunch cb_bringup start_all_real.launch</code></p> <p>Typically on the robot there are already some nodes running. In this case you can use the UI and initialization button. This will launch the whole robot using catmux scripting.</p>"},{"location":"cb_docs/cb_sprayarm_docs/sprayarm/#low-level-architecture","title":"Low-level architecture","text":"<p>The robotic arm v6 has 5 motors:</p> <p></p> <p>The Arm control box contains a carrier PCB which connects all other PCBs it also provides power and data connection to the base. The following PCBs are connected to the carrier board: - 5 Motorcontroller PCBs in row. Starting with motor 1 (M1) as the lowest board.     - They are attached to with sandwich pcb directly to the carrier board. - A custom PCB for     - M1-M3 brake control (transistors that set brake signal from 5v to 24v)     - ESP32 with USB connection used for         - Spray nozzle control         - LED light rgb control.     - The custom pcb manual cable connections for brake, data, and power connection</p> <p>There are two 24V power cables and one 48V. They are used for: 1) 24V: Brakes 2) 24V: Logic 1) 48V: Motors</p> <p>If the emergency controller is triggered, this disconnects the PCBs of the motors from the brakes and motors power cables, but leaves the logic power cable ON.</p> <p>For data communication, the control box is connected via can and USB3. Can is connected to the 5 Motorcontrollers, USB3 is connected to a USB hub which divides the signal to:     -  Realsense camera front     -  Realsense camera back     - The ESP32 on the custom PCB for LED and Nozzle control</p>"},{"location":"cb_docs/cb_tutorials/access%20the%20OpenMediaVault%20software/","title":"access the OpenMediaVault software","text":"<p>To access the OpenMediaVault software (NAS), use the following IP address: http://192.168.1.182</p>"},{"location":"cb_docs/cb_tutorials/clonezilla/","title":"Flashing an SSD with Clonezilla","text":""},{"location":"cb_docs/cb_tutorials/clonezilla/#prerequisites","title":"Prerequisites","text":"<ul> <li>Extract the image and copy it to <code>/home/partimag</code> on the system.</li> </ul>"},{"location":"cb_docs/cb_tutorials/clonezilla/#steps-to-flash-the-ssd","title":"Steps to Flash the SSD","text":"<ol> <li> <p>Unmount the SSD from the Host System    Before starting, make sure the SSD is unmounted from your system to avoid any data corruption. Check with <code>df -h</code></p> </li> <li> <p>Launch Clonezilla    Open a terminal and run the following command to start Clonezilla:    ```bash    sudo clonezilla</p> </li> <li> <p>Select \"device-image\"      Clonezilla will ask what you want to do; choose the option \"device-image\" (this allows you to work with disk images).</p> </li> <li> <p>Select \"Skip\"      If Clonezilla asks to mount or select a disk, choose \"Skip\".</p> </li> <li> <p>Choose \"Beginner\"      Choose the \"Beginner\" option to proceed with the simplest method for restoring an image.</p> </li> <li> <p>Choose \"restoredisk\"      Select the \"restoredisk\" option to restore the disk image onto the target disk.</p> </li> <li> <p>Choose the Image to Flash      Clonezilla will prompt you to select the image. Browse to the image location (which should be in /home/partimag), and select the image you want to flash onto the SSD.</p> </li> <li> <p>Choose the Target SSD      Select the attached external SSD as the target disk for the restore operation.</p> </li> <li> <p>Check the Image Before Restore </p> <ul> <li>Choose \"Check the image before restore\" to verify the integrity of the image before flashing it onto the SSD.</li> <li>After that, choose \"Choose option after restoring\" for additional options after the restore completes.</li> </ul> </li> <li> <p>Follow the Prompts from Clonezilla     Proceed with the rest of the prompts. Clonezilla will guide you through the process of restoring the image to the SSD. Follow the instructions carefully to ensure the restoration goes smoothly.</p> </li> </ol>"},{"location":"cb_docs/cb_tutorials/clonezilla/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cb_docs/cb_tutorials/clonezilla/#if-the-image-is-a-different-size-than-the-ssd","title":"If the Image is a Different Size Than the SSD:","text":"<p>If the image is not the same size as the SSD you're flashing to, follow these steps:</p> <ol> <li> <p>Choose Expert Mode      When prompted by Clonezilla, choose \"Expert Mode\" to allow for advanced options.</p> </li> <li> <p>Continue with the Process      Proceed with the restoration steps in Expert Mode.</p> </li> <li> <p>Enable the -icds Option     When prompted, go to the Extra parameters section and choose the -icds option. This will allow Clonezilla to ignore the size mismatch between the image and the target SSD.</p> </li> <li> <p>Choose the Rest of the Options as Standard      Keep the remaining settings as the default (standard) options and proceed with the restore process.</p> </li> </ol>"},{"location":"cb_docs/cb_tutorials/new_timings_instruction/","title":"New timings instruction","text":""},{"location":"cb_docs/cb_tutorials/new_timings_instruction/#verbinden-mit-roboter","title":"Verbinden mit Roboter","text":"<ul> <li>connect your laptop in the same network as the robot</li> <li>connect to the robot with ssh</li> <li>use 'cattach' alias to attach to our catmux session to see the status</li> </ul>"},{"location":"cb_docs/cb_tutorials/new_timings_instruction/#measure-the-timings","title":"Measure the timings","text":"<ul> <li>open another window in catmux</li> <li>paint a test line with 'rosrun cb_executor paint_line_left.py' or 'rosrun cb_executor paint_line_right.py'</li> <li>measure how far of the timings is (in meter)</li> </ul>"},{"location":"cb_docs/cb_tutorials/new_timings_instruction/#timings-calculator-node","title":"Timings calculator node","text":"<ul> <li>open another window in catmux</li> <li>run the calculator node with 'rosrun cb_sprayarm_timings timings_calculator_node'</li> <li>this node should be left running throughout the timings configuration session</li> </ul>"},{"location":"cb_docs/cb_tutorials/new_timings_instruction/#service-calls","title":"Service calls","text":"<ul> <li>call the calculator service in another terminal with rosservice call /sprayarm/timings/timings_calculator \"left_or_right: '' (left or right in the  '') up_or_down: '' enable_or_disable: '' distance: 0.0\"</li> <li>you have to fill in all of the actual parameter within the service call</li> <li>you will receive the result from the service</li> <li>fill in the results in /cb_config/arm_configs/$ARM_NUMBER/timings.yaml</li> <li>after you filled all of the desired change to the timings</li> <li>then run the script 'rosrun cb_sprayarm_timings reload_params.sh'</li> <li>if the timings is still off repeat the section 'service calls' again until satisfied</li> </ul>"},{"location":"cb_docs/cb_tutorials/new_timings_instruction/#to-finish-things-off","title":"To Finish things off","text":"<ul> <li>shutdown the calculator node if the result is to your satisfaction</li> <li>the calculator node needs to be shutdown before you continue using the robot again!!</li> <li>you can continue using the robot like usual</li> </ul>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/","title":"MMSegmentation Installation Guide for NVIDIA Jetson","text":"<p>This guide provides step-by-step instructions for installing the MMLabSuite packages on an NVIDIA Jetson device. These instructions will help you set up the PyTorch ecosystem with specific versions that are compatible with Jetson hardware.</p>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#prerequisites","title":"Prerequisites","text":"<ul> <li>NVIDIA Jetson device with JetPack 5.1 or later</li> <li>Internet connection</li> <li>Git installed</li> </ul>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#installation-steps","title":"Installation Steps","text":""},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#1-create-working-directory-and-python-virtual-environment","title":"1. Create Working Directory and Python Virtual Environment","text":"<p>First, we'll create a dedicated directory and virtual environment for the MMLabSuite:</p> <pre><code># Create a Software directory\nmkdir -p Software\ncd Software\n\n# Create virtual environment named 'mmlab' using Python's built-in venv\npython3 -m venv mmlab\n\n# Activate the virtual environment\nsource mmlab/bin/activate\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#2-install-pytorch-for-jetson","title":"2. Install PyTorch for Jetson","text":"<p>Install the specific PyTorch version for Jetson:</p> <pre><code># Download PyTorch wheel for Jetson\nwget https://developer.download.nvidia.com/compute/redist/jp/v51/pytorch/torch-1.14.0a0+44dac51c.nv23.02-cp38-cp38-linux_aarch64.whl\n\n# Install the downloaded PyTorch wheel\npip install torch-1.14.0a0+44dac51c.nv23.02-cp38-cp38-linux_aarch64.whl\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#3-install-torchvision","title":"3. Install TorchVision","text":"<pre><code># Install torchvision\npip install torchvision==0.15.0\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#5-clone-and-install-mmcv","title":"5. Clone and Install mmcv","text":"<pre><code># Clone mmcv repository\ngit clone https://github.com/open-mmlab/mmcv.git\ncd mmcv\n\n# Install the specific version\ngit checkout v2.0.0rc4\n\n# Install the package\npip install -v -e .\n\n# Return to the Software directory\ncd ..\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#6-clone-and-install-mmengine","title":"6. Clone and Install mmengine","text":"<pre><code># Clone mmengine repository\ngit clone https://github.com/open-mmlab/mmengine.git\ncd mmengine\n\n# Install the specific version\ngit checkout v0.10.4\n\n# Install the package\npip install -v -e .\n\n# Return to the Software directory\ncd ..\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#7-clone-and-install-mmsegmentation","title":"7. Clone and Install mmsegmentation","text":"<pre><code># Clone mmsegmentation repository\ngit clone https://github.com/open-mmlab/mmsegmentation.git\ncd mmsegmentation\n\n# Install the specific version\ngit checkout v1.2.2\n\n# Install the package\npip install -v -e .\n\n# Return to the Software directory\ncd ..\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#8-install-mmdet","title":"8. Install mmdet","text":"<pre><code># Install mmdet\npip install mmdet==3.3.0\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#9-install-ftfy","title":"9. Install ftfy","text":"<pre><code># Install ftfy\npip install ftfy==6.2.3\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#10-fix-pytorch-alpha-version-compatibility-issue","title":"10. Fix PyTorch Alpha Version Compatibility Issue","text":"<p>Since we're using an alpha version of PyTorch, we need to modify the <code>mmengine/dist/dist.py</code> file to ensure compatibility:</p> <pre><code># Navigate to the mmengine directory\ncd mmengine\n\n# Create a backup of the original dist.py file\ncp mmengine/dist/dist.py mmengine/dist/dist.py.backup\n\n\n# With nano:\nnano mmengine/dist/dist.py\n</code></pre> <p>Find and comment out the following section in the file:</p> <pre><code># Comment out the following section:\n# def get_reduce_op(name: str) -&gt; torch_dist.ReduceOp:\n#     op_mappings = {\n#         'sum': torch_dist.ReduceOp.SUM,\n#         'product': torch_dist.ReduceOp.PRODUCT,\n#         'min': torch_dist.ReduceOp.MIN,\n#         'max': torch_dist.ReduceOp.MAX,\n#         'band': torch_dist.ReduceOp.BAND,\n#         'bor': torch_dist.ReduceOp.BOR,\n#         'bxor': torch_dist.ReduceOp.BXOR,\n#     }\n#     if name.lower() not in op_mappings:\n#         raise ValueError(\n#             f'reduce op should be one of {op_mappings.keys()}, bug got {name}')\n#     return op_mappings[name.lower()]\n</code></pre> <p>Save and exit the editor (for nano: CTRL+O, Enter, CTRL+X).</p>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#11-verify-installation","title":"11. Verify Installation","text":"<p>After completing all the steps, you can verify your installation by importing the packages:</p> <pre><code># Activate the virtual environment if not already activated\nsource Software/mmlab/bin/activate\n\n# Start Python\npython\n\n# Try importing the packages\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; import torchvision\n&gt;&gt;&gt; import mmcv\n&gt;&gt;&gt; import mmengine\n&gt;&gt;&gt; import mmdet\n&gt;&gt;&gt; import mmsegmentation\n&gt;&gt;&gt; print(f\"PyTorch version: {torch.__version__}\")\n&gt;&gt;&gt; print(f\"MMCV version: {mmcv.__version__}\")\n&gt;&gt;&gt; print(f\"MMEngine version: {mmengine.__version__}\")\n&gt;&gt;&gt; print(f\"MMDet version: {mmdet.__version__}\")\n&gt;&gt;&gt; exit()\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#reference-links","title":"Reference Links","text":""},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#mmlabsuite-documentation","title":"MMLabSuite Documentation","text":"<ul> <li>MMCV Installation Guide</li> <li>MMEngine Installation Guide</li> <li>MMSegmentation Documentation</li> </ul>"},{"location":"cb_docs/cb_vision_docs/MMSeg%20Installation%20Guide%20for%20NVIDIA%20Jetson/#nvidia-resources","title":"NVIDIA Resources","text":"<ul> <li>PyTorch for Jetson (NVIDIA Forums)</li> </ul>"},{"location":"cb_docs/cb_vision_docs/camera_calibration/","title":"Camera Calibration &amp; Setup","text":""},{"location":"cb_docs/cb_vision_docs/camera_calibration/#setup-new-arm","title":"Setup new arm","text":"<ol> <li>Connect new arm to jetson (base), execute and follow the commands in cb_tools/setup_cameras.bash</li> <li>Try to execute the process and have a look at the visualization/ui. If you see you need to lower/higher one or both cameras: execute adjust_camera_z_offset.bash. Add accordingly some offsets, so the ceiling is detected correctly. (alternatively change the yaml in the arm camera.yaml config files)</li> </ol>"},{"location":"cb_docs/cb_vision_docs/jetson_faf/","title":"Jetson faf","text":"<p>Check running tmux sessions:</p> <pre><code>tmux ls\n````\nthere should be the following two tmux sessions from the start:\n```console\ncb_vision_jetson\nros_serial\n````\n\n**Start/Restart Vision on jetson:**\n```console\nsudo systemctl start start_vision_jetson.service\n````\n```console\nsudo systemctl restart start_vision_jetson.service\n````\n\nAttaching to the tmux seession:\n```console\ntmux attach -t cb_vision_jetson\n````\n\nIf the service does not restart:\n```console\ntmux kill-session -t cb_vision_jetson\n````\nor ctrl+c in the tmux session and then try to restart the service and wait around 50s for initialization\n\nComment: sometimes the other sessions get killed if ctrl+c in the tmux session, then the other session has to be started again (see above)\n\n**Start/Restart ESP on jetson:**\n\n```console\nsudo systemctl start start_ros_serial.service\n````\n```console\nsudo systemctl restart start_ros_serial.service\n````\n\nAttaching to the tmux seession:\n```console\ntmux attach -t ros_serial\n````\n\nIf the service does not restart:\n```console\ntmux kill-session -t ros_serial\n````\nor ctrl+c in the tmux session and then try to restart the service\n\nComment: sometimes the other sessions get killed if ctrl+c in the tmux session, then the other session has to be started again (see above)\n\n**Start/Restart ESP+ Camera watchdog on jetson:**\n\n```console\nsudo systemctl start start_camera_watchdog.service\n````\n```console\nsudo systemctl restart start_camera_watchdog.service\n````\n\nSee the printouts of the watchdog service:\n```console\nsudo systemctl status start_camera_watchdog.service\n````\n\n\nGeneral commets:\n- The structure of the filesystem is the same as on the robot pc\n- status and temp of the jeston can be checked with \n```console\njtop\n````\n- time sync can be checked with\n```console\nntpdate -t 10.11.12.10\n</code></pre> <ul> <li>ros master is set as standard to 10.11.12.10</li> </ul>"},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/","title":"How to Mount a CIFS Share from Scratch","text":""},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following prerequisites before beginning:</p> <ul> <li>The <code>cifs-utils</code> package installed.</li> <li>Network access to the CIFS share.</li> <li>Proper credentials for accessing the CIFS share.</li> </ul>"},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#1-install-cifs-utils","title":"1. Install CIFS-utils","text":"<p><code>cifs-utils</code> is required to mount CIFS (SMB) shares. Install it using your package manager.</p> <p>For Debian-based distributions (like Ubuntu):</p> <pre><code>sudo apt update\nsudo apt install cifs-utils\n\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#2-create-a-mount-point","title":"2. Create a Mount Point","text":"<p>A mount point is a directory where the CIFS share will be accessed. Create a directory for this purpose. <code>/mnt/nasberry</code>: This is the path of the directory to be created. You can replace <code>nasberry</code> with any name you prefer.</p> <pre><code>sudo mkdir -p /mnt/nasberry\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#3-mount-the-cifs-share","title":"3.  Mount the CIFS Share","text":"<p>Use the <code>mount</code> command with the appropriate options to mount the CIFS share. Replace <code>username</code> and <code>password</code> with the actual credentials.</p> <pre><code>sudo mount -t cifs -o username=&lt;your_username&gt;,password=&lt;your_password&gt; //192.168.1.182/nasberry ./mnt/nasberry\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/mount_cifs_and_process_dataset/#4-make-the-script-executable","title":"4. Make the Script Executable","text":"<p>Ensure the script has executable permissions. Run the following command to make it executable:</p> <p>```bash chmod +x split_mask_view_datasets.py</p> <pre><code>### 5. Prepare Your Dataset Directory\n\nEnsure you have the dataset directory you want to process. The dataset should be organized with images and annotations to run error-free. The path to this directory will be required when running the script.\n\n### 6. Run the Script\n\nUse the following command to run the `split_mask_view_datasets.py` script. Replace `/path/to/dataset` with the actual path to your dataset directory (from the mounted NAS)\n\n```bash\nsudo python3 split_mask_view_datasets.py /path/to/dataset\n</code></pre>"},{"location":"cb_docs/cb_vision_docs/nas_access_guide/","title":"NAS Access and User Management Guide","text":""},{"location":"cb_docs/cb_vision_docs/nas_access_guide/#network","title":"Network","text":"<p>File Manager Access: 1. Click \"Other Locations\" at the bottom of your file manager sidebar 2. In the \"Networks\" section, find and double-click \"raspberrypi - SMB/CIFS\" 3. This will open the authentication dialog below</p> <p>Authentication Dialog: You'll see a password dialog titled \"Password required for share nasberry on raspberrypi.local\" with fields for username, domain (showing \"Nasberry_cb_vision\"), and password. Select \"Registered User\" and \"Remember password until you logout\".</p>"},{"location":"cb_docs/cb_vision_docs/nas_access_guide/#connection-settings","title":"Connection Settings","text":"<ul> <li>Connect As: Select \"Registered User\"</li> <li>Username: Enter your first name</li> <li>Domain: <code>Nasberry_cb_vision</code></li> <li>Password: Enter your assigned password (stored in KeePass)</li> </ul>"},{"location":"cb_docs/cb_vision_docs/nas_access_guide/#managing-the-nas-and-creating-users","title":"Managing the NAS and Creating Users","text":""},{"location":"cb_docs/cb_vision_docs/nas_access_guide/#openmediavault-web-access","title":"OpenMediaVault Web Access","text":"<ul> <li>URL: http://192.168.1.180/#/login</li> <li>Username: admin</li> <li>Password: Stored in KeePass</li> </ul>"},{"location":"cb_docs/cb_vision_docs/nas_access_guide/#creating-new-users","title":"Creating New Users","text":"<p>Step 1: Add User 1. Log into OpenMediaVault web interface 2. Navigate to User Management/Users 3. Click Add button (+) 4. Fill in user details:    - Name: username (your name)    - Password: Use the one from KeePass    - Groups: Add to <code>users</code> and <code>Nasberry_cb_vision</code></p> <p>Step 2: Set Permissions 1. Go to User Management/Users/Permissions 2. Select the desired shared folder 3. Click Privileges tab 4. Set permissions for the new user:    - Read/Write: Full access    - Read-only: View only    - No access: Deny access</p> <p>Step 3: Apply Changes 1. Click Save to store configuration 2. Go to System \u2192 General Settings 3. Click Apply to activate changes 4. Wait for yellow notification to disappear</p>"},{"location":"cb_docs/cb_vision_docs/readme/","title":"Readme","text":""},{"location":"cb_docs/cb_vision_docs/readme/#chart-containing-the-cb_vision-pipeline","title":"Chart containing the <code>cb_vision</code> pipeline","text":"<ul> <li>https://lucid.app/lucidchart/4c261041-fd74-471b-b86c-7240c7528303/edit?viewport_loc=-239%2C-945%2C2096%2C1638%2CHWEp-vi-RSFO&amp;invitationId=inv_cd7a8f3f-0f2b-4178-a5fc-a8c6503f4f21</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/","title":"Vision notes","text":""},{"location":"cb_docs/cb_vision_docs/vision_notes/#connect-to-jetson","title":"Connect to jetson","text":"<ul> <li>use 10.11.12.40</li> <li>the folder strucure is the same as on the pc</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#set-the-fallback-for-the-basement","title":"Set the fallback for the basement","text":"<p>Use cb_config/process.yaml: fallback to true</p>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#disable-obstacle-detection-ceiling-detection","title":"Disable Obstacle detection /ceiling detection","text":"<p>Use cb_config/process.yaml:  - set use_obstacle_detection to false - set use_ceiling_detection to false</p>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#check-startup-node-on-rob5","title":"Check startup node on rob5","text":"<ul> <li>check if the startup node is running: tmux ls</li> <li>if not: sudo systemctl start startup_node.service</li> <li>restart also the vision and ros_serial tmux sessions on the jetson (see below)</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#if-the-robot-is-not-launching-correctly","title":"If the robot is not launching correctly","text":"<ul> <li>thois has probably something to do with the camera_server, this happens if the cameras are not reachable</li> <li>restart the vision_jetson tmux session on the jetson (see below)</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#to-do-when-camera-is-not-working","title":"To do when camera is not working","text":"<ul> <li>restart the vision tmux session on the jetson: sudo systemctl restart start_vision_jetson.service</li> <li>don't forget to check if the ros_serial tmux session is still running: tmux ls</li> <li>if not running execute: sudo systemctl start start_ros_serial.service</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#check-if-everything-is-running-correctly-and-see-the-vision-data","title":"Check if everything is running correctly and see the vision data","text":"<ul> <li>subscribe to /object_server/object_data to se what is used for a rebuild</li> <li>use rviz conif for visualization of the detections</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#change-confidence-value-for-segmentation","title":"Change confidence value for segmentation","text":"<ul> <li>if too much noise or too less of the points of the obstacles are displayed in the pointcloud</li> <li>change the confindence value of the segementation in: jetson -&gt;cb_vision/cb_segmentation/config/segmentation.yaml change conf_threshold</li> <li>the lower the value the more will be detected as \"obstacles\"</li> </ul>"},{"location":"cb_docs/cb_vision_docs/vision_notes/#change-priors","title":"Change priors","text":"<ul> <li>if there are to many little obstacles detected on the wall, change the obstacle priors</li> <li>cb_vision/cb_obstacle_detection/config/obstacle_extraction_prior.yaml</li> <li>change height and width to bigger issues to filter out small \"obstacles\"</li> </ul>"},{"location":"cb_docs/error_handling/","title":"Error handling on the robot with user interaction","text":""},{"location":"cb_docs/error_handling/#json-schema","title":"JSON schema","text":"<p>For passing information between the ROS side and the frontend, we need a way of reliably structure data that is coming back from the frontend. Also, the frontend needs to know what the backend wants. The requirements for these needs are:</p> <ul> <li>data to display to the user:</li> <li>information texts</li> <li>type of interaction (e.g. confirm, error, warning)</li> <li>data sent back to the ROS</li> <li>sending inputs (e.g. numerical values or strings) for error handling or correction</li> <li>deciding between different actions (e.g. continue, cancel, confirm)</li> </ul> <p><code>JSON schemas</code> is initially a way to define how data that a server receives should look like. So, natively, the second group of requirements is covered by the schemas already. Schemas can be extended to contain information that is needed for displaying the intent to the user without affecting the shape of the expected response.</p> <p>If you want to read a bit into JSON schemas, see the official documentation: In about 20 minutes, one should have a rough feeling about how they work. If you are an interactive learner, check out this tour of its syntax.</p> <p>As JSON schemas are used widely e.g. to define JSON-based APIs, there are lots of tools, that one can work with. The most central usage of schemas is to validate a response to its schema. For the languages that are used at <code>ConBotics</code> (Python, C++, TypeScript) there are packages that can perform validation.</p>"},{"location":"cb_docs/error_handling/#example","title":"Example","text":"<p>In our context, this is how some simple schemas might look like:</p> <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"conbotics/confirm.schema.json\",\n  \"description\": \"&lt;Here we can put information to the user, like 'The process is finished!'&gt;\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"const\": \"&lt;id set by the backend&gt;\"\n    },\n    \"message\": {\n      \"enum\": [\"confirm\", \"abort\"]\n    }\n  },\n  \"required\": [\"id\", \"message\"]\n}\n</code></pre> <p>This schema would accept a response such as:</p> <pre><code>{\n  \"id\": \"&lt;id set by the backend&gt;\",\n  \"message\": \"confirm\"\n}\n</code></pre> <p>Another example, where the user has to enter some data to fix an issue:</p> <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"conbotics/manual-ceiling-height.schema.json\",\n  \"description\": \"The robot can't find a proper ceiling height. Enter one to resume the process!\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"const\": \"&lt;id set by the backend&gt;\"\n    },\n    \"ceilingHeight\": {\n      \"type\": \"number\",\n      \"default\": 2.7\n      \"minimum\": 1.5,\n      \"maximum\": 3.6,\n    },\n    \"action\": {\n      \"type\": \"string\",\n      \"enum\": [\"retry\", \"abort\"]\n    }\n  },\n  \"required\": [\"id\", \"action\", \"ceilingHeight\"]\n}\n</code></pre> <p>The UI can parse this information and show the user the range of possible inputs. Also, it can show the user which values are needed for each option to go forward with. <code>properties</code>, <code>const</code>, <code>type</code>, <code>default</code>, <code>enum</code>, <code>required</code>, <code>min/maximum</code> etc. are all special keywords of JSON schema</p>"},{"location":"cb_docs/error_handling/#tooling","title":"Tooling","text":"<p>As said earlier, there are many implementations of JSON schema functionalities available. Here are some options that I thought might be worth a look into:</p> <ul> <li>jsonschema: Python package to validate   responses to schemas.</li> <li>Could be used by the error handler before accepting a response.</li> <li>An alternative would be jschon</li> <li>React JSON schema form: A package   that generates UI forms from a given schema.</li> <li>This would have the benefit of not having to implement the logic ourselves to create     the bodies of error handling notifications.</li> <li>Another candidate for this task would be ui-schema</li> <li>quicktype: A library that generates code (classes, parsers)   for strongly-typed languages.</li> <li>This could be applied similar to ROS messages, where one defined a schema and at compile time     the header files are generated.</li> </ul>"},{"location":"cb_docs/error_handling/#problems","title":"Problems","text":"<p>We are employing JSON schema to be flexible as otherwise, one could simply define error codes on the frontend and backend and the frontend \"knows\" what input the backend needs. Ideally, the UI would be as \"stupid\" as can be to avoid having too much logic implemented there. So, we want to be able to send arbitrary requests to the frontend, which means that we need JSON schemas (or some alternative) as a way to communicate the needs in an organized way. Now, if we want to be able to construct request schemas at runtime (e.g. for combined error handling), we need a way to generate them from code. I don't know a good way to do that in C++.</p> <p>I think, for now, this could be tackled by building a small toolbox that makes it easy to dynamically add properties to an existing schema. More complex structures, like <code>oneOf</code>, <code>enum</code>, or nested objects might be harder to implement. But I think for now, our needs are not that complex.</p> <p>When it comes to using a parsed response, it depends on if we use generated header files. Then, one could work with properly typed member access. For that, static schemas are needed. For dynamically created schemas, one will have to resort to accessing the parsed response as a map/dictionary.</p>"},{"location":"cb_docs/error_handling/#schema-creating-api","title":"Schema creating API","text":"<p>We propose a plugin in <code>cb_utils</code> that leverages <code>rapidjson</code> to create and validate schemas. The plugin should offer an API that makes it simple to create a schema. The following code is not supposed to work out of the box, but rather illustrate the idea:</p> <p><code>schema_tools.h</code>:</p> <pre><code>#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n\nstruct BaseArgs {\n  std::string name;\n};\n\nstruct IntegerArgs : BaseArgs {\n  std::optional&lt;int&gt; minimum = std::nullopt,\n  std::optional&lt;int&gt; maximum = std::nullopt,\n};\n\nclass SchemaBase {\n  Value val;\n\n  public:\n    std::string name;\n    const SchemaBase() {}\n    std::string compile();\n    const &amp;Value getValue() {\n      return val;\n    }\n};\n\nclass Integer : SchemaBase {\n  const Integer(IntegerArgs args) : SchemaBase() {\n    name = args.name;\n    val.SetObject();\n    Value obj(kObjectType);\n    Value type(\"number\");\n    obj.AddMember(\"type\", type, val.GetAllocator());\n    if (args.minimum.has_value()) {\n      Value min(args.minimum);\n      val.AddMember(\"minimum\", min, val.GetAllocator());\n    }\n    if (args.maximum.has_value()) {\n      Value max(args.maximum);\n      val.AddMember(\"maximum\", max, val.GetAllocator());\n    }\n    val.AddMember(args.name, obj, val.GetAllocator());\n  }\n};\n\nstd::string create_schema(const vector&lt;SchemaBase&gt; properties, const std::string&amp; description) {\n  Document d;\n  d.SetObject()\n    .AddMember(\"$schema\", \"https://json-schema.org/draft/2020-12/schema\", d.GetAllocator())\n    .AddMember(\"$id\", \"conbotics/manual-ceiling-height.schema.json\"), d.GetAllocator();\n    .AddMember(\"description\", description, d.GetAllocator())\n    .AddMember(\"type\", \"object\", d.GetAllocator());\n\n  Value ps(kObjectType);\n  for (int i = 0; i &lt; properties.size(); ++i) {\n    ps.AddMember(properties[i].name, properties[i].getValue(), d.GetAllocator())\n  }\n\n  d.AddMember(\"properties\", ps, d.GetAllocator());\n\n  StringBuffer buffer;\n  Writer&lt;StringBuffer&gt; write(buffer);\n  d.Accept(writer);\n  return buffer.GetString();\n}\n\nbool validate(std::string json, std::string schema) {\n  Document sd;\n  if (sd.Parse(schema).HasParseError()) {\n    return false;\n  }\n\n  SchemaDocument s(sd);\n\n  Document d;\n  if (d.Parse(json).HasParseError()) {\n    return false;\n  }\n\n  SchemaValidator validator(schema);\n  return d.Accept(validator);\n}\n</code></pre> <p>Applied in some cpp file:</p> <pre><code>#include \"cb_utils/schema_tools.h\"\n\nusing namespace schema_tools;\n\nint main() {\n  const std::string schema = create_schema({\n    Integer(IntegerArgs {.name = \"ceiling_height\", .minimum = 2.2}),\n  }, \"The robot can't find a proper ceiling height. Enter one to resume the process!\");\n  const std::string jsonString = \"{'ceiling_height': 4.1}\";\n  const boolean success = validate(jsonString, schema);\n}\n</code></pre>"},{"location":"cb_docs/licences/Overview/","title":"Overview","text":"Repository Toolbox Licence Link cb_vision rtabmap_ros BSD http://wiki.ros.org/rtabmap_ros cb_vision mmsegmentation + mask2former Apache-2.0 https://www.google.com/search?channel=fs&amp;client=ubuntu&amp;q=mmsegmentation+github cb_vision realsense_ros Apache-2.0 https://github.com/IntelRealSense/realsense-ros cb_vision librealsense Apache-2.0 https://github.com/IntelRealSense/librealsense cb_vision rtabmap BSD-3-Clause https://github.com/introlab/rtabmap cb_base gmapping BSD, Apache-2.0 http://wiki.ros.org/gmapping cb_sprayarm moveit BSD-3-Clause license https://github.com/ros-planning/moveit cb_core flexbee BSD-3-Clause https://github.com/FlexBE cb_led_control adafruit neopixel LGPL-3.0 license https://github.com/adafruit/Adafruit_NeoPixel cb_base_controller cb_base teb_local_planer BSD-3-Clause license http://wiki.ros.org/teb_local_planner rapidjson cb_vision apriltag_ros BSD 2-Clause License https://github.com/AprilRobotics/apriltag_ros"},{"location":"cb_docs/licences/Todos/","title":"BSD","text":"<ul> <li>Dokumentation braucht: Lizenzkopie (Copyright-Vermerk, Liste der Bedingungen, Haftungsklausel)</li> <li>Werbematerial, welches Benutzung der Softwarekomponenten erw\u00e4hnt brauchen bestimmten Satz</li> <li>Urheber nicht zum werben nutzen</li> <li>Ver\u00f6ffentlichter Source-Code muss Lizenz-Text behalten</li> </ul>"},{"location":"cb_docs/licences/Todos/#bsd-3-clause","title":"BSD-3-Clause","text":"<ul> <li>gleiche relevante Bedingungen wie BSD</li> <li>Dokumentation braucht: Lizenzkopie (Copyright-Vermerk, Liste der Bedingungen, Haftungsklausel)</li> <li>Urheber nicht zum werben nutzen</li> <li>Ver\u00f6ffentlichter Source-Code muss Lizenz-Text behalten</li> </ul>"},{"location":"cb_docs/licences/Todos/#apache-20","title":"Apache-2.0","text":"<ul> <li>**Kopie oder Verweis auf Lizenz beif\u00fcgen</li> <li>Software darf nicht Apache hei\u00dfen</li> <li>Bei (Quellcode) Ver\u00f6ffentlichung:<ul> <li>modifizierte Stellen auff\u00e4llig angeben</li> </ul> </li> <li>Lizenzhinweise aus NOTICE Datei beachten</li> </ul>"},{"location":"cb_docs/licences/Todos/#lgpl-30","title":"LGPL-3.0","text":"<ul> <li>F\u00fcr Anwendungen (nur Nutzung der Library):<ul> <li>Auff\u00e4llig angeben, dass die Library genutzt wird und unter LGPL-3 Lizenz steht</li> <li>Kopie der Lizenz mit liefern</li> </ul> </li> <li>**Kominierte Werke: ** (evtl relevant?!)<ul> <li>Nutzung der Library die \u00fcber einfaches einbinden des Library Interfaces (header Datei) hinaus geht.</li> <li>Es muss m\u00f6glich sein weitere \u00c4nderungen zu der unter LGPL Lizenz stehenden Software zu machen und das mit unserem Code zu nutzen. z.B. indem unser Code in Compilierter Form ver\u00f6ffentlicht wird (Download oder mitgeben).</li> <li>Die Frage ist: Nutzen wir LGPL als Anwendung oder kombiniertes Werk?<ul> <li>Anwendung -&gt; funktioniert auch ohne den offenen Code</li> <li>Kombinierte Werke: Ist vollst\u00e4ndig davon abh\u00e4ngig. </li> <li>F\u00fcr adafruit neopixel haben wir praktisch nur einen Ros wrapper f\u00fcr unsere funktionalit\u00e4t. Bin mir nicht sicher wo wir da hinfallen. Darius</li> </ul> </li> </ul> </li> <li>f\u00fcr modifizierten code (modifizierte library), muss dieser wieder ver\u00f6ffentlicht werden. Das hei\u00dft nicht alles muss Quelloffen gemacht werden, aber es muss m\u00f6glich sein weitere \u00c4nderungen zu der unter LGPL Lizenz stehenden Software zu machen und das mit unserem Code zu nutzen. z.B. indem unser Code in Compilierter Form ver\u00f6ffentlicht wird (Download oder mitgeben).</li> </ul>"},{"location":"cb_docs/robot_cleaning/Putzanleitung/","title":"Putzanleitung","text":"<p>Verbinden mit Roboter 1. Stromzufuhr des Roboters anstecken 2. Mit Roboter \u00fcber ConBotics_lab_5g verbinden 3. \u00fcber IP im Browser auf GUI zugreifen 192.168.0.105:3000 4. Terminal per ssh mit Roboter verbinden ssh prototype@http://192.168.0.105/ Putzen der Base 1. Ansaug- und Ablassschlauch mit Pinsel grob von der \u00fcbersch\u00fcssigen Farbe befreien 2. Einen Eimer mit klarem Wasser f\u00fcllen 3. Ansaugschlauch in Eimer mit klarem Wasser 4. Kompressorventil auf horizontale Position stellen 5. Ablassschlauch \u00fcber Farbeimer halten,Kompressor anschalten und F\u00f6rdermenge einstellen und Farbe in Farbeimer zur\u00fcckpumpen, bis Wasser aus dem Ablassschlauch austritt 6. Ablassschlauch in leeren Eimer h\u00e4ngen 7. Sauberes Wasser durch System Pumpen (Kompressor anschalten und F\u00f6rdermenge einstellen) bis Eimer leer ist oder Wasser aus Ablassschlauch klar WALT-R Putzanleitung 1wird 8. Falls Wasser aus Ablassschlauch nicht klar: Zur\u00fcck zu Schritt 2 und ohne Schritt 5 wiederholen 9. Filter des Ansaugschlauchs abschrauben und reinigen Putzen des Arms 1. In GUI System \u00fcber Blitzsymbol starten 2. Unter \u201cZahnrad\u201d Passwort nur mit \u201cEnter\u201d best\u00e4tigen und \u201cTo Home\u201d 3. Nach Home \u201cTo Position\u201d 4. Spr\u00fchd\u00fcse von der Spr\u00fchkopf entfernen 5. Farbeimer unter Spr\u00fchkopf stellen 6. \u00dcber GUI manueller Betrieb Achse 2 und 5 so einstellen, dass Spr\u00fchkopf m\u00f6glichst \u00fcber Farbeimer und so wenig wie m\u00f6glich spritzen kann 7. Ansaugschlauch in Eimer mit klarem Wasser 8. Kompressorventil auf vertikale Stellung bringen 9. \u00dcber das Terminal die spary_valve \u00fcber den rosservice \u00f6ffnen (oder GUI) rosservice call /sprayarm/spray_valve \"Header: seq: 0 stamp: secs: 0 nsecs: 0 frame_id: '' enable: true\" 10. Kompressordruck aufbauen, bis Wasser in den Farbeimer gelangt 11. \u00dcber das Terminal doe spray_valve \u00fcber den rosservice schlie\u00dfen (oder GUI) rosservice call /sprayarm/spray_valve \"Header: seq: 0 stamp: secs: 0 nsecs: 0 frame_id: '' enable: false\" 12. Leeren Eimer unter Spr\u00fchkopf stellen WALT-R Putzanleitung 213. Schritt 9-11 ohne Spr\u00fchkopf, mit Spr\u00fchkopf und mit Spr\u00fchkopf auf offener Stellung wiederholen, bis klares Wasser austritt 14. Roboterarm \u201cTo Home\u201d bringen 15. Herunterfahren der Robotersteuerung \u00fcber \u201cBlitz\u201d in GUI 16. Herunterfahren des Ubuntu systems mit sudo shutdown now</p>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/","title":"Airless Paint Sprayer Cleaning Checklist","text":""},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#materials-needed","title":"Materials Needed:","text":"<ul> <li>[ ] Water or solvent (depending on the type of paint used)</li> <li>[ ] Empty buckets</li> <li>[ ] Wrench (for disassembly)</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#cleaning-steps","title":"Cleaning Steps:","text":""},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#preparation","title":"Preparation","text":"<ul> <li>[ ] Bring enough water in filled in buckets.</li> <li>[ ] Have an empty bucket ready for the wastewater.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#empty-the-paint","title":"Empty the Paint","text":"<ul> <li>[ ] Remove excess paint and return it to the paint container, by letting the inlet drip down the paint.</li> <li>[ ] Emtpy the paint in the hose by removing the nozzel and pull the trigger while building pressure and spray in the paint bucket until water comes out.</li> <li>[ ] Place the intake tube into a bucket of paint thinner or appropriate cleaning solvent.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#flush-the-system","title":"Flush the System","text":"<ul> <li>[ ] Place the return line into an empty bucket.</li> <li>[ ] Switch to prime/cleaning mode and let the solvent circulate until it runs clear.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#clean-the-spraygun-and-hose","title":"Clean the spraygun and hose","text":"<ul> <li>[ ] Trigger the gun to allow solvent to flow through and clean the internal components while you build pressure.</li> <li>[ ] Rinse until clear water comes out of the spraygun.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#clean-the-nozzle","title":"Clean the nozzle","text":"<ul> <li>[ ] Remove the nozzle and guard.</li> <li>[ ] Soak them in solvent.</li> <li>[ ] Use a brush to clean any paint build-up.</li> <li>[ ] Inspect for wear and replace if necessary.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#additional-cleaning","title":"Additional cleaning:","text":""},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#clean-filters-and-tips","title":"Clean Filters and Tips","text":"<ul> <li>[ ] Remove the filter from the gun handle and main filter housing using a wrench.</li> <li>[ ] Soak and brush the filters in solvent to remove paint residue. Rinse and let dry.</li> <li>[ ] Remove the spray tip and guard, soak them in solvent, brush clean, inspect for wear, and replace if necessary.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#clean-the-pump","title":"Clean the Pump","text":"<ul> <li>[ ] Disassemble the pump according to the manufacturer\u2019s instructions.</li> <li>[ ] Soak and clean all removable parts in solvent. Brush to ensure all parts are free of paint.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#reassembly","title":"Reassembly","text":"<ul> <li>[ ] Reassemble the filters, spray gun, and pump components once all parts are clean and dry. Ensure all connections are tight and secure.</li> </ul>"},{"location":"cb_docs/robot_cleaning/To_do_cleaning_robo/#additional-tips","title":"Additional Tips","text":"<ul> <li>[ ] Clean the sprayer after every use to prevent paint from drying and clogging the system.</li> <li>[ ] Regularly lubricate the pump and other moving parts as recommended by the manufacturer.</li> <li>[ ] Store the sprayer in a clean, dry place to prevent rust and other damage.</li> </ul>"},{"location":"cb_docs/spray_documentation/nozzle_configurations/","title":"Nozzle configurations","text":"Brand Nozzle Pressure Range Additional Info Wagner nozzles 517 150-170 bar 519 160-180 bar Grako nozzles 417 150-170 bar 0.4 wall distance 517 150-175 bar"},{"location":"cb_docs/spray_documentation/paint_documentation/","title":"Painting documentation","text":""},{"location":"cb_docs/spray_documentation/paint_documentation/#paint","title":"Paint","text":"<ol> <li>If the valve compressor is not turned ON automatically, turn it ON, via CAN:</li> </ol> <pre><code>cansend can0 00d#01 // start\n</code></pre> <ol> <li>Plug in the paint compressor, turn it ON, set it to 170bars, and turn the black knob facing leftward (opposite of the piesometer).</li> <li>Place a paint bucket and lower the compressor to a sucking position.</li> <li>You are ready to run a spray process.</li> <li>When you are done, turn OFF the valve compressor (if is not done automatically):</li> </ol> <pre><code>cansend can0 00d#00 // stop\n</code></pre>"},{"location":"cb_docs/spray_documentation/paint_documentation/#calibrate","title":"Calibrate","text":"<ol> <li>Run the <code>cb_executor_test/scripts/calibration/paint_line_left</code> and <code>cb_executor_test/scripts/calibration/paint_line_right</code> with paint (or water), and measure the lower/upper left/right start/stop positions of the sprayline. </li> <li>Adjust the lower/upper left/right start/stop timings on the laptop and save. Alternatively, you can adjust these by running a normal process.</li> </ol>"},{"location":"cb_docs/spray_documentation/paint_documentation/#clean","title":"Clean","text":"<ol> <li>For cleaning, follow the cleaning guidelines</li> <li>To be able to paint again, you may optionally first remove the water by:     a. Place the paint bucket on the robot, and the return line into an empty bucket     b. Set the black knob facing downward.     c. Set the pressure to cleaning mode and pump out water until paint comes out</li> </ol>"},{"location":"cb_docs/support/field_engineer/","title":"Field Engineer","text":""},{"location":"cb_docs/support/field_engineer/#work-procedure-deliverables","title":"Work Procedure - Deliverables","text":"<ol> <li>Timeplan: Plan a timeline for the time being on the job site. Set some goals that the robot should achieve until the end of the time there (eg. be able to paint room 4 and 5 and the car park)</li> <li>Case studies: Assess site and identify all the possible case studies.  Test and collect data (rosbags) for these.</li> <li>Troubleshooting: Note down all the issues faced, and the procedures to solve each. By the end of the project, there should be a streamline process with what guidelines to follow and in which order, depending on the issue faced.</li> <li>Feedback data: Give direct feedback to the team for every issue, and note them down to track their state/progress. Ideally use KANBAN to track the progress of the issues (error logging), and capture rosbags for each one of them. Transfer the issues into Github issues.</li> <li>Daily activity log: Fill a daily activity log with all the paints that took place every day, together with the issues.</li> <li>Performance indicators: Extract important information regarding the performance of the robot (eg time/meter, how often we need to clean the lidar, maintain the robot etc). </li> <li>Usage guidelines: Guide customer for robot operation, next steps, recording and training.</li> <li>Calibrate timings and odometry.</li> </ol>"},{"location":"cb_docs/support/field_engineer/#specifications","title":"Specifications","text":"Specifications Value Notes Packaging dimensions 745 x 1225 x 1945 mm Mobile platform dimensions 715 x 1225 x 806 mm Maximum height 3.2 Maximum height 3.2 Supply voltage 48V DC (robot)/240V AC (airless) Optimum nozzle pressure 16 (MPa) up to 22 Coverage 160 - 200 (sqm/h) Charging time 5h Operating time 6h Back wheel diameter 240mm"},{"location":"cb_docs/support/field_engineer/#troubleshooting","title":"Troubleshooting","text":"<p>Troubleshooting</p>"},{"location":"cb_docs/support/field_engineer/#software-architecture","title":"Software Architecture","text":""},{"location":"cb_docs/support/field_engineer/#network","title":"Network","text":""},{"location":"cb_docs/support/field_engineer/#hardware","title":"Hardware","text":"<p> edit</p>"},{"location":"cb_docs/support/field_engineer/#electronics","title":"Electronics","text":"<p>Eplan</p>"},{"location":"cb_docs/support/field_engineer/#painting-instructions","title":"Painting instructions","text":"<p>Painting instructions</p>"},{"location":"cb_docs/support/field_engineer/#robot-cleaning-instruction","title":"Robot cleaning instruction","text":"<p>Putzanleitung</p>"},{"location":"cb_docs/support/field_engineer/#notes","title":"Notes","text":""},{"location":"cb_docs/support/field_engineer/#calibrate-odometry","title":"Calibrate odometry","text":"<pre><code>- Have a mark for the beginning position of the robot. Drive it forward few meters. Then backward. Observe how right or left the robot arrived compared to the initial mark. If it landed on the right side of it, that means the right wheel radious has to be smaller ot the left bigger. If it landed on the left side of it, that means the left wheel radious has to be smaller ot the right bigger.\n- Change the values accordingly, in the cb_config/base_configs/base_MR0x/general.yaml for left_wheel_radius and right_wheel_radius.\n- Run `rosparam load .../general.yaml`\n- Run \n```\nrostopic pub -1 /spraybot/base/set_wheel_radii std_msgs/Float32MultiArray \"layout:\n</code></pre> <p>dim:   - label: ''     size: 0     stride: 0   data_offset: 0 data: [, ]\" <pre><code>    - Then command the robot to go straight for 2m:\n    ```\n    rostopic pub -1 /spraybot/navigation/straight_line/goal cb_msgs/LineMotionActionGoal \"header:\n  seq: 0\n  stamp:\n    secs: 0\n    nsecs: 0\n  frame_id: ''\ngoal_id:\n  stamp:\n    secs: 0\n    nsecs: 0\n  id: ''\ngoal:\n  step_size: 2.0\n  velocity: 0.2\" \n  ```\n  - Measure the distance between the initial mark, and where the robot reached.\n  - If it is less than 2m, then decrease the \n\nIf we move more than 2m, increase the values. If less, decrease them.\nIf we are turning on the left, decrease the left wheel radius\n\n\n### Move 6th axis:\n\n</code></pre> <p>rostopic pub -1 /sprayarm/set_mounting_point_out_action_server/goal</p> <pre><code>False: To move the arm in / True: To move the arm out.\n\nor:\n</code></pre> <p>cansend can0 009#01: 6th axis in cansend can0 009#02: 6th axis out</p> <pre><code>\n### To make USB syncable\n</code></pre> <p>lsblk -f #to find the USB UUID ./cb_tools/scripts/register_syncable_usb.sh #to make the USB syncable journalctl -u usb-sync-XXXX-XXXX.service -f #to verify, after you replug the USB</p> <pre><code>\n### Record rosbag\n</code></pre> <p>rosparam set /config/general/user/record_rosbag true python3 src/cb_bringup/scripts/record_rosbag.py</p> <pre><code>\n### Copy to usb\n</code></pre> <p>lsblk: Identify usb sudo mkdir /mnt/usb sudo mount -o uid=1000,gid=1000 /dev/sdb1 /mnt/usb sudo rsync -ah --info=progress2 --remove-source-files ~/rosbags/2025-07-31*.bag /mnt/usb/  (maybe add --no-owner --no-group) sudo umount /mnt/usb</p> <pre><code>\n### See rviz\nOn your laptop:\n</code></pre> <p>export ROS_IP=10.11.12.10 # or whatever the IP of the robot is export ROS_MASTER_URI=http://10.11.12.10:11311 rviz ```</p>"},{"location":"cb_docs/support/troubleshooting/","title":"Robot Troubleshooting &amp; Maintenance Guide","text":"<p>Last verified on 14 October 2025</p>"},{"location":"cb_docs/support/troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Maintenance Schedule </li> <li>Troubleshooting Workflow </li> <li>Sensor Diagnostics </li> <li>CAN Bus &amp; Motor Issues </li> <li>RTAB-Map &amp; SLAM Reset </li> <li>System Health Check </li> </ol>"},{"location":"cb_docs/support/troubleshooting/#maintenance-schedule","title":"Maintenance Schedule","text":"Task Frequency Command / Action Liquid/Air Supply Integrity During Use Ensure the airless device only pumps liquid and never air. Pneumatic Link Inspection &amp; Tightening Weekly Inspect and tighten all pneumatic links (especially at the compressor or the ones with a screw tightener). Perhaps teflon or glue will be needed for the screws. Compressor Heat Monitoring Bi-Weekly Check and monitor the heat/temperature of the compressor department. Motor Heat Monitoring Bi-Weekly Check the heat around motors 1, 2, 3, 4, and 5. Pressure Container Drainage Bi-Monthly Regularly check and remove condensed water from the pressure container. Motor 1 Belt Lubrication Monthly (Inferred) Apply appropriate grease to the belt of motor 1. Motor Replacement (Conditional) As Needed Procedure: 1. Cut Motor 1 cables. 2. Unscrew Motor 2/3 (front screw, then 4 others). 3. Unscrew Motor 4/5 (front 6, then 4 and 4; unplug 2 cables). 4. Calibrate with the PC before final assembly."},{"location":"cb_docs/support/troubleshooting/#troubleshooting-workflow","title":"Troubleshooting Workflow","text":"<p>Start from Common problems, then drill down into specific tablet, mechanical/environment, electronics, and software checks. Each one of the problems, refers to a higher to lower level check/solution. User can refer until the electronics level, and the team takes care of the software level.</p>"},{"location":"cb_docs/support/troubleshooting/#common-problems","title":"Common problems","text":"1 The robot does not initialize / Initialization timed out <p>Refer to:</p> <ul> <li>2.7 Mechanical: Check arm calibration </li> <li>2.5 Mechanical: Check electrical cables </li> <li>4.3 Software: Check missing nodes </li> </ul> 2 The robot LED does not turn on / change color <p>Refer to:</p> <ul> <li>2.5 Mechanical: Check electrical cables </li> <li>4.3 Software: Check missing nodes </li> </ul> 3 The base does not move <p>Refer to:</p> <ul> <li>1.1 Tablet: Wi-Fi connection check </li> <li>2.4 Mechanical: Verify emergency button </li> <li>2.8 Mechanical: Verify lidar view </li> <li>4.1 Software: Check CAN communication </li> </ul> 4 The airless does not spray paint <p>Possible causes: 1. Spray valve air compressor not working 2. Airless device not working 3. Electrical connection issue  </p> <p>Check:</p> <ul> <li>2.12 Mechanical: Verify airless device pressure </li> <li>2.13 Mechanical: Verify spray valve air compressor </li> <li>2.3 Mechanical: Verify pneumatic links, bolts, connectors, cables </li> <li>2.14 Mechanical: Paint inlet tube clean </li> <li>2.15 Mechanical: Clean airless filter </li> <li>2.16 Mechanical: Clean/replace pneumatic nozzle </li> <li>2.17 Mechanical: Replace pneumatic tube </li> <li>2.18 Mechanical: Check paint hoses </li> <li>3.4 Electronics: Verify electric signal to spray valve and pressure switch </li> </ul> 5 Spray doesn\u2019t start/stop at correct times on ceiling/floor <p>Refer to:</p> <ul> <li>1.3 Tablet: Recalibrate spray timing </li> <li>2.19 Mechanical: Verify arm alignment </li> </ul> 6 Valve not aligned perpendicular to wall <p>Refer to:</p> <ul> <li>1.4 Tablet: Home position calibration </li> <li>2.19 Mechanical: Verify arm alignment </li> <li>4.13 Software: Motor CAN check </li> </ul> 7 Robot does not spray until end-wall <p>Refer to:</p> <ul> <li>1.8 Tablet: Recalibrate Wheel Odometry </li> </ul> 8 After pressing \u201cStart Robot\u201d, no pop-up appears <p>Refer to:</p> <ul> <li>4.4 Software: Run roswtf </li> <li>4.5 Software: Verify UI request </li> <li>4.6 Software: Verify robot state </li> <li>4.10 Software: Robce </li> </ul> 9 Planning arm motion failed / \u201cBuilder failed\u201d <p>Refer to:</p> <ul> <li>1.6 Tablet: Verify dimensions </li> <li>4.7 Software: Review rviz collisions </li> </ul> 10 Arm crashed or stuck in dangerous position <p>Refer to:</p> <ul> <li>1.4 Tablet: Home position calibration </li> <li>1.5 Tablet: Restart PC </li> <li>4.8 Software: Reset axes and reinitialize </li> <li>4.9 Software: Arm2base goal check </li> </ul> 11 Tablet connection keeps dropping <p>Refer to:</p> <ul> <li>2.10 Mechanical: Check environment interference </li> </ul> 12 Arm pauses for too long between spraylines <p>Refer to:</p> <ul> <li>2.5 Mechanical: Check electrical cables </li> </ul> 13 Motor 1 has disturbances / oscillations / inconsistent motion <p>Refer to:</p> <ul> <li>1.7 Tablet: Warm up Motor 1 </li> </ul> 14 Arm moves unevenly <p>Refer to:</p> <ul> <li>2.20 Mechanical: Check axis 6 washer </li> </ul> 15 Robot stopped during initialization with proximity errors <p>Refer to:</p> <ul> <li>2.1 Mechanical: Clean the lidars </li> </ul> 16 Robot stopped mid-painting, no pop-up shown <p>Refer to:</p> <ul> <li>2.1 Mechanical: Clean the lidars </li> </ul> 17 Spraylines misaligned / not reaching corners / gaps between lines <p>Refer to:</p> <ul> <li>1.8 Tablet: Recalibrate Wheel Odometry </li> <li>2.19 Mechanical: Verify arm alignment </li> <li>2.25 Mechanical: Pump tyres </li> <li>2.26 Mechanical: Tighten front wheels </li> </ul> 18 Robot doesn\u2019t drive straight <p>Refer to:</p> <ul> <li>1.8 Tablet: Recalibrate Wheel Odometry </li> <li>2.11 Mechanical: Verify room layout </li> <li>2.25 Mechanical: Pump tyres </li> <li>2.26 Mechanical: Tighten front wheels </li> </ul> 19 Door/window detection errors (false positives/negatives) <p>Refer to:</p> <ul> <li>2.9 Mechanical: Assess lighting </li> </ul> 20 Green button not flashing <p>Refer to:</p> <ul> <li>2.4 Mechanical: Emergency button check </li> <li>2.6 Mechanical: Verify relays </li> </ul> 21 Arm axis 2 feels loose <p>Refer to:</p> <ul> <li>2.22 Mechanical: Axis 2 screw check </li> </ul> 22 Axis 3 not moving as expected <p>Refer to:</p> <ul> <li>2.23 Mechanical: Tighten motor 3 drive belt </li> </ul> 23 Axis 3 fails to reach home position properly <p>Refer to:</p> <ul> <li>2.24 Mechanical: Check motor 3 limit switch </li> </ul>"},{"location":"cb_docs/support/troubleshooting/#1-tablet","title":"1. Tablet","text":""},{"location":"cb_docs/support/troubleshooting/#11-wi-fi-connection-check","title":"1.1 Wi-Fi Connection Check","text":"<p>Make sure you are connected to the Wi-Fi of the robot, the antenna is not covered, and there is network connection between the tablet and the robot.</p>"},{"location":"cb_docs/support/troubleshooting/#12-re-initialize","title":"1.2 Re-initialize","text":"<p>Perform a full re-initialization of the robot via the tablet.</p>"},{"location":"cb_docs/support/troubleshooting/#13-recalibrate-spray-timing","title":"1.3 Recalibrate Spray Timing","text":"<p>Adjust spray start/stop timings for ceiling/floor coverage.</p>"},{"location":"cb_docs/support/troubleshooting/#14-home-position-calibration","title":"1.4 Home Position Calibration","text":"<p>While the robot is de-initialized: - Place the spray-gun close to the <code>Initialize</code> position. - Reset axes, initialize again, and press <code>Home position</code>. - Ensure arm is perpendicular to the wall and cables do not limit motion.</p>"},{"location":"cb_docs/support/troubleshooting/#15-restart-pc","title":"1.5 Restart PC","text":"<p>Restart the PC.</p>"},{"location":"cb_docs/support/troubleshooting/#16-verify-dimensions","title":"1.6 Verify dimensions","text":"<p>Make sure you didn't manually added dimensions that are bigger than the actual dimensions of the wall/ceiling. Or that you did not add non-matched dimensions in the \"Change wall settings\" and \"Add obstacles\" field.</p>"},{"location":"cb_docs/support/troubleshooting/#17-warm-up-motor-1","title":"1.7 Warm up Motor 1","text":"<ul> <li>Stop the process and bring the arm to home position.</li> <li>Move axis 1 up and down several times, slow and fast, to warm up.</li> <li>Repeat as dry run until smooth motion is observed.</li> </ul>"},{"location":"cb_docs/support/troubleshooting/#18-recalibrate-wheel-odometry","title":"1.8 Recalibrate Wheel Odometry","text":"<p>Perform wheel odometry recalibration to ensure accurate robot motion.</p>"},{"location":"cb_docs/support/troubleshooting/#2-mechanical-assembly-environment","title":"2. Mechanical - Assembly - Environment","text":""},{"location":"cb_docs/support/troubleshooting/#robot","title":"Robot","text":""},{"location":"cb_docs/support/troubleshooting/#21-clean-the-lidars","title":"2.1 Clean the lidars","text":"<p>Remove dust or any obstruction on lidar sensors to ensure accurate mapping.</p>"},{"location":"cb_docs/support/troubleshooting/#22-clean-the-cameras","title":"2.2 Clean the cameras","text":"<p>Check and clean all cameras to remove smudges, dust, or debris.</p>"},{"location":"cb_docs/support/troubleshooting/#23-verify-pneumatic-links-bolts-connectors-and-cables","title":"2.3 Verify pneumatic links, bolts, connectors, and cables","text":"<p>Ensure all pneumatic lines and mechanical connections are properly secured and tightened.</p>"},{"location":"cb_docs/support/troubleshooting/#24-verify-emergency-button","title":"2.4 Verify emergency button","text":"<p>Once the area is clear, ensure the emergency button is not pressed.</p>"},{"location":"cb_docs/support/troubleshooting/#25-check-electrical-cables","title":"2.5 Check electrical cables","text":"<p>Ensure all electric cables, especially USB, are securely connected in the arm cabinet. If necessary, check the electrical cabinet as well.</p>"},{"location":"cb_docs/support/troubleshooting/#26-verify-relays","title":"2.6 Verify relays","text":"<p>Ensure relays are not stuck (on the right). Manually reset them on the left if needed.</p>"},{"location":"cb_docs/support/troubleshooting/#27-check-arm-calibration","title":"2.7 Check arm calibration","text":"<p>Make sure the arm is not currently calibrating before proceeding.</p>"},{"location":"cb_docs/support/troubleshooting/#environment","title":"Environment","text":""},{"location":"cb_docs/support/troubleshooting/#28-verify-lidar-view","title":"2.8 Verify lidar view","text":"<p>Ensure there are no obstacles in the line-of-sight of the lidars.</p>"},{"location":"cb_docs/support/troubleshooting/#29-assess-lighting","title":"2.9 Assess lighting","text":"<p>Check the lighting conditions. Depth cameras use infrared patterns, which may be disrupted by intense light. Reduce sunlight exposure if needed.</p>"},{"location":"cb_docs/support/troubleshooting/#210-check-electromagnetic-interference","title":"2.10 Check electromagnetic interference","text":"<p>Ensure the robot is not near other robots or large operating machines that could cause interference.</p>"},{"location":"cb_docs/support/troubleshooting/#211-verify-room-layout","title":"2.11 Verify room layout","text":"<p>Make sure there are no linear barriers or obstacles in the sight of the robot that could confuse the robot or cause misalignment.</p>"},{"location":"cb_docs/support/troubleshooting/#airless-device-air-compressor","title":"Airless Device / Air Compressor","text":""},{"location":"cb_docs/support/troubleshooting/#212-verify-airless-device-pressure","title":"2.12 Verify airless device pressure","text":"<p>Set pressure to approximately 150 bars.</p>"},{"location":"cb_docs/support/troubleshooting/#213-verify-spray-valve-air-compressor","title":"2.13 Verify spray valve air compressor","text":"<p>Verify the spray valve air compressor is on. Check that the compressor starts at 6 bars and stops at 7.5 bars. Remove the compressor tube from the arm cabinet; if trapped air is released, the compressor is on. Otherwise, check for leaks (see 2.3).</p>"},{"location":"cb_docs/support/troubleshooting/#214-check-paint-inlet-tube","title":"2.14 Check paint inlet tube","text":"<p>Remove and inspect the paint inlet tube. Ensure the ball rotates freely. Turn upside-down and pump water to clear.</p>"},{"location":"cb_docs/support/troubleshooting/#215-clean-airless-filter","title":"2.15 Clean airless filter","text":"<p>Ensure the filter is not clogged.</p>"},{"location":"cb_docs/support/troubleshooting/#216-clean-or-replace-pneumatic-valve-nozzle","title":"2.16 Clean or replace pneumatic valve nozzle","text":"<p>Inspect the nozzle and clean or replace if necessary.</p>"},{"location":"cb_docs/support/troubleshooting/#217-replace-pneumatic-tube","title":"2.17 Replace pneumatic tube","text":"<p>Check and replace the pneumatic tube if it is loose or damaged.</p>"},{"location":"cb_docs/support/troubleshooting/#218-verify-paint-hoses","title":"2.18 Verify paint hoses","text":"<p>Ensure all paint hoses/tubes are clear and free of kinks.</p>"},{"location":"cb_docs/support/troubleshooting/#robotic-arm","title":"Robotic Arm","text":""},{"location":"cb_docs/support/troubleshooting/#219-verify-axes-4-5-and-valve-alignment","title":"2.19 Verify axes 4, 5, and valve alignment","text":"<p>Ensure motors 4 and 5 and valve are properly aligned and screwed. Check bevel gears of motor 4 for correct washer spacing. Spraygun should be perpendicular to the wall. If not, reset axes, re-initialize, and recalibrate using the app. Otherwise the cover of 4/5 axis may need a replacement.</p>"},{"location":"cb_docs/support/troubleshooting/#220-check-axis-6-washer","title":"2.20 Check axis 6 washer","text":"<p>Ensure axis 6 does not miss any washers around its screws.</p>"},{"location":"cb_docs/support/troubleshooting/#221-tighten-screws-on-motor-2-angle-gear","title":"2.21 Tighten screws on motor 2 angle gear","text":"<ul> <li>Remove the plate\u2019s 7 screws  </li> <li>Move axis 1 to top, motor 2 to horizontal  </li> <li>Tighten 4 screws; ensure teeth alignment on bottom screws</li> </ul>"},{"location":"cb_docs/support/troubleshooting/#222-verify-motor-2-angle-gear-screws","title":"2.22 Verify motor 2 angle gear screws","text":"<p>Double-check all screws of the angle gear of motor 2 are securely tightened.</p>"},{"location":"cb_docs/support/troubleshooting/#223-tighten-motor-3-drive-belt","title":"2.23 Tighten motor 3 drive belt","text":"<p>Ensure the drive belt is properly tensioned.</p>"},{"location":"cb_docs/support/troubleshooting/#224-check-motor-3-limit-switch","title":"2.24 Check motor 3 limit switch","text":"<p>Limit the switch for motor 3. Verify the switch and cables are functional and correctly positioned.</p>"},{"location":"cb_docs/support/troubleshooting/#base","title":"Base","text":""},{"location":"cb_docs/support/troubleshooting/#225-pump-tyres","title":"2.25 Pump tyres","text":"<p>Inflate wheel tyres to 4 bars (~240 mm diameter).</p>"},{"location":"cb_docs/support/troubleshooting/#226-tighten-front-wheels","title":"2.26 Tighten front wheels","text":"<p>Secure front wheels at 90 Nm torque. Recalibrate after tightening.</p>"},{"location":"cb_docs/support/troubleshooting/#3-electronics","title":"3. Electronics","text":""},{"location":"cb_docs/support/troubleshooting/#31-base-controller-lights","title":"3.1 Base controller lights","text":"<p>Check that two lights of base controllers are ON. They are turned OFF by the emergency button and ON after pressing the green button. If OFF, see 3.2.</p>"},{"location":"cb_docs/support/troubleshooting/#32-plc-lights","title":"3.2 PLC lights","text":"<ul> <li>1st: CPU PLC  </li> <li>2nd: LiDAR interface  </li> <li>3rd: PC interface  </li> <li>4th\u20136th: Output devices  </li> </ul> <p>Top lights: feedback, bottom lights: output. Voltage adherence from left to right: 48V, 48V, 24V, 24V inverted. First 3 normally open (no contact), 4th normally closed, 5th is power. When you trigger the power, the switches are the opposite (1-3 closed, 4th open). If there is something wrong in this, go to 1.5.</p>"},{"location":"cb_docs/support/troubleshooting/#33-verify-relays","title":"3.3 Verify relays","text":"<p>Ensure relays are not stuck. If still faulty, check 3.1.</p>"},{"location":"cb_docs/support/troubleshooting/#34-verify-electric-signals","title":"3.4 Verify electric signals","text":"<p>Ensure electrical signals for spray valve air compressor and air pressure switch are present.</p>"},{"location":"cb_docs/support/troubleshooting/#4-software","title":"4. Software","text":""},{"location":"cb_docs/support/troubleshooting/#41-check-can-communication","title":"4.1 Check CAN communication","text":"<pre><code>candump can0\n</code></pre> <p>Confirm microcontroller sends messages.</p>"},{"location":"cb_docs/support/troubleshooting/#42-verify-plc-status","title":"4.2 Verify PLC status","text":"<pre><code>rostopic echo /plc/status\n</code></pre> <p><code>contactor_base_on</code> and <code>contactor_arm_on</code> should both be True. Otherwise, see 3.3.</p>"},{"location":"cb_docs/support/troubleshooting/#43-check-missing-nodes","title":"4.3 Check missing nodes","text":"<pre><code>rostopic echo /missing_nodes\n</code></pre>"},{"location":"cb_docs/support/troubleshooting/#44-run-roswtf","title":"4.4 Run roswtf","text":"<pre><code>roswtf\n</code></pre>"},{"location":"cb_docs/support/troubleshooting/#45-verify-ui-request","title":"4.5 Verify UI request","text":"<pre><code>rostopic echo /ui/request\n</code></pre> <p>Confirm the expected pop-up appears.</p>"},{"location":"cb_docs/support/troubleshooting/#46-verify-robot-state","title":"4.6 Verify robot state","text":"<pre><code>rostopic echo /ui/robot_state\n</code></pre> <p>If we are connected to the robot, <code>connected_to_robot_core\\</code> should be true. If we started the process, <code>robotStatus\\</code> should be true.</p>"},{"location":"cb_docs/support/troubleshooting/#47-review-rviz-collisions","title":"4.7 Review RViz collisions","text":"<p>Open RViz gen2 file and check for any red collision indicators.</p>"},{"location":"cb_docs/support/troubleshooting/#48-reset-sprayarm-axes","title":"4.8 Reset sprayarm axes","text":"<p>Run </p> <pre><code>cb_tools/sprayarm_axis_reset/reset_axes_script.py\n</code></pre> <p>Have someone hold each axis sequentially (1st \u2192 3rd) while releasing motor brakes one at a time.</p>"},{"location":"cb_docs/support/troubleshooting/#49-check-arm2base-goal","title":"4.9 Check arm2base goal","text":"<p>Run </p> <pre><code>rostopic echo /sprayarm/set_arm2base/goal ... goal = false\n</code></pre> <ul> <li>False: arm in position, 6th axis out and it places the collision objects accordingly.</li> <li>True: arm in home position, 6th axis in</li> </ul>"},{"location":"cb_docs/support/troubleshooting/#410-run-robce","title":"4.10 Run robce","text":"<p>Execute <code>robce</code>.</p>"},{"location":"cb_docs/support/troubleshooting/#411-ensure-6th-axis-is-in","title":"4.11 Ensure 6th axis is in","text":"<p>Make sure the 6th axis is in. If not, Run:</p> <pre><code>rostopic pub -1 /sprayarm/set_mounting_point_out_action_server/goal\n</code></pre> <p>to false, to bring it in. Run 4.9. Then restart, Reset axes and reinitialize.</p>"},{"location":"cb_docs/support/troubleshooting/#412-adjust-arm-and-wall-margins","title":"4.12 Adjust arm and wall margins","text":"<p>Set <code>arm_margin = 0.15</code> and <code>end_wall_margin = 0.0</code>.</p>"},{"location":"cb_docs/support/troubleshooting/#413-motor-can-check","title":"4.13 Motor CAN check","text":"<p>On one terminal:</p> <pre><code>for id in 1 2 3 4 5; do\ncansend can1 $(printf \"60%X\" $id)#4098600000000000\ndone\n</code></pre> <p>On another:</p> <pre><code>candump can1\n</code></pre> <p>Each motor should reply with 0x580 + ID. If one motor doesn\u2019t reply, it is likely offline or not powered.</p>"},{"location":"cb_docs/test_cases/General%20test%20cases/","title":"General test cases","text":""},{"location":"cb_docs/test_cases/General%20test%20cases/#-overlapping-obstacles-in-x-and-z-direction","title":"- overlapping obstacles in x- and z- direction","text":""}]}