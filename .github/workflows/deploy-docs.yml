name: Receive Submodule Update

# This workflow runs in your parent repository (conbotics.github.io)
on:
  # Listens for the event type sent by the Dispatcher workflow
  repository_dispatch:
    types: [submodule-update-needed]

jobs:
  update-submodule:
    runs-on: ubuntu-latest
    
    # Define variables from the client_payload sent by the dispatching repo
    env:
      # These variables are passed directly from the client_payload
      SHA: ${{ github.event.client_payload.sha }}
      SUBMODULE_PATH: ${{ github.event.client_payload.submodule_path }}
      PARENT_BRANCH: master
      NEW_SUBMODULE_SHA: ${{ github.event.client_payload.sha }}

      # Use GitHub's built-in context variables
      REPO_OWNER: conbotics
      PARENT_REPO: conbotics.github.io


    steps:
    - name: Display received payload information
      run: |
        echo "Dispatch received from cb_docs!"
        echo "Target Branch: ${{ env.PARENT_BRANCH }}"
        echo "Submodule Path: ${{ env.SUBMODULE_PATH }}"
        echo "New Submodule SHA: ${{ env.NEW_SUBMODULE_SHA }}"
        
    - name: Generate GitHub App token for Write access
      id: app-token
      uses: actions/create-github-app-token@v2
      with:
        # Use the same secrets/App ID from the dispatch workflow
        app-id: ${{ secrets.DOCS_APP_ID }}
        private-key: ${{ secrets.DOCS }}
        owner: ${{ env.REPO_OWNER }}
        repositories: 'conbotics.github.io' # Only need access to the parent repo
        
    - name: Checkout Parent Repository Code
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }} # Use the powerful App Token
        ref: ${{ env.PARENT_BRANCH }}
        submodules: false # Do NOT checkout the old submodule content yet

    - name: Configure Git and Update Submodule Pointer
      run: |
        # Configure Git user for the commit
        git config user.name "GitHub Submodule Bot"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # Update the submodule pointer in the parent repository to the new SHA
        git submodule update --init --recursive --force ${{ env.SUBMODULE_PATH }}
        
        # This command ensures the parent repo uses the specific SHA from the payload
        git -C ${{ env.SUBMODULE_PATH }} checkout ${{ env.NEW_SUBMODULE_SHA }}
        
        # Stage the change in the parent repo (which is the updated commit pointer)
        git add ${{ env.SUBMODULE_PATH }}
        
    - name: Commit and Push Submodule Pointer Change
      run: |
        # Check if there are changes to commit (i.e., if the submodule pointer actually moved)
        if ! git diff --cached --exit-code; then
          git commit -m "chore(submodule): Automated update of cb_docs to ${{ env.NEW_SUBMODULE_SHA }}"
          echo "Pushing submodule update to ${{ env.PARENT_BRANCH }}..."
          git push origin ${{ env.PARENT_BRANCH }}
          echo "Submodule pointer updated successfully."
        else
          echo "Submodule pointer was already at the latest SHA. No commit necessary."
        fi

    - name: Install MkDocs and Dependencies (Example)
      # You'll likely need to customize this part for your environment
      run: |
        pip install mkdocs mkdocs-material

    - name: Build MkDocs Documentation
      run: |
        mkdocs build --clean
        # Add any deployment steps here, e.g., using mkdocs gh-deploy if applicable.
        # If you use the standard GH Pages action later, this step is for building the content.