name: Sync and Update Submodules

on:
  repository_dispatch:
    types: [submodule-update-needed]

permissions:
  contents: write  # Need write to push commits

jobs:
  sync_and_update:
    runs-on: ubuntu-latest
    
    env:
      REPO_OWNER: conbotics
      SUBMODULE_PATH: ${{ github.event.client_payload.submodule_path }}
      BRANCH: ${{ github.event.client_payload.branch }}
      SHA: ${{ github.event.client_payload.sha }}

    steps:   
    - name: Generate GitHub App token
      id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ secrets.DOCS_APP_ID }}
        private-key: ${{ secrets.DOCS }}
        owner: ${{ env.REPO_OWNER }}
        repositories: conbotics.github.io,cb_docs

    - name: Checkout Parent Repository Code (Full Clone)
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }}
        ref: ${{ env.BRANCH }} 
        fetch-depth: 0 
        submodules: false

    - name: Update submodule to latest commit
      run: |
        git config --global url."https://x-access-token:${{ steps.app-token.outputs.token }}@github.com".insteadOf "https://github.com"
        git submodule sync
        git submodule update --init --recursive --remote --merge
        
    - name: Commit and push submodule pointer
      run: |
        git config user.name "GitHub Submodule Bot"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        git add ${{ env.SUBMODULE_PATH }}
        
        if git diff --cached --quiet; then
          echo "No changes to submodule pointer"
          exit 0
        fi
        
        LATEST_SHA=$(cd ${{ env.SUBMODULE_PATH }} && git rev-parse HEAD)
        git commit -m "chore(submodule): update cb_docs to ${LATEST_SHA}"
        
        git push https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ env.REPO_OWNER }}/conbotics.github.io.git HEAD:${{ env.BRANCH }}
        
        echo "Submodule pointer updated to ${LATEST_SHA}"

    - name: Install MkDocs
      run: pip install mkdocs mkdocs-material
    
    - name: Build documentation
      run: mkdocs build --clean
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ steps.app-token.outputs.token }}
        publish_dir: ./site
        publish_branch: gh-pages