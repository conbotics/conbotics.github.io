name: Sync and Update Submodules

# This workflow runs in the Parent Repository (conbotics.github.io)
# It is triggered by the 'repository_dispatch' event sent from the cb_docs submodule.
on:
  repository_dispatch:
    types: [submodule-update-needed]

# Permissions: We only need 'contents: read' since we are NOT pushing a commit.
permissions:
  contents: read 

jobs:
  sync_and_update:
    runs-on: ubuntu-latest
    
    # Define these parameters once at the job level
    env:
      REPO_OWNER: conbotics

    steps:
      - name: Generate GitHub App token for Read access
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          # Use the same secrets/App ID from the dispatch workflow
          app-id: ${{ secrets.DOCS_APP_ID }}
          private-key: ${{ secrets.DOCS }}
          owner: ${{ env.REPO_OWNER }}
          repositories: 'conbotics.github.io, cb_docs' # Need read access to both for sync/update
          

      - name: Checkout Parent Repository Code (with submodule support)
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }} # Use the App Token for private submodule access
          submodules: false # Skip initial checkout to perform sync manually

      - name: Sync and Update Submodules
        run: |
          echo "Synchronizing remote URLs..."
          # 1. Sync: Ensures the .gitmodules config is up-to-date with remote URLs
          git submodule sync
          
          echo "Updating submodules to the SHA recorded in the index..."
          # 2. Update: Initializes the submodule (if needed) and checks out the SHA recorded 
          #    in the parent repository's current HEAD commit.
          git submodule update --init --recursive
          
      # --- Build Steps ---
      - name: Install MkDocs and Dependencies (Example)
        # Your documentation tool needs to be installed here
        run: |
          pip install mkdocs mkdocs-material

      - name: Build MkDocs Documentation
        # This will build the documentation using the content checked out in the previous step
        run: |
          mkdocs build --clean
          # Follow this with your deployment step (e.g., using a GitHub Pages action)